<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>calc on Zichen Wang</title>
        <link>https://zichen34.github.io/writenotes/calc/</link>
        <description>Recent content in calc on Zichen Wang</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 13 Jan 2024 09:00:00 +0000</lastBuildDate><atom:link href="https://zichen34.github.io/writenotes/calc/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>memo: Calc | Derivative of &#34;Matrix&#34;</title>
        <link>https://zichen34.github.io/writenotes/calc/matrix_derivative/</link>
        <pubDate>Sat, 13 Jan 2024 09:00:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/matrix_derivative/</guid>
        <description>&lt;p&gt;(2024-02-14)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Derivative is the &lt;strong&gt;amount&lt;/strong&gt; of change in a target object caused by a variable&amp;rsquo;s change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A row a matrix consists of the coefficient of each term in a linear equation.
And based on the &amp;ldquo;sum rule&amp;rdquo; of derivative ($(f+g)&amp;rsquo;=f&amp;rsquo;+g&amp;rsquo;$), the derivative of the linear equation w.r.t. a variable is the
summation of the derivative of each element in the row w.r.t. the variable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;d-ax&#34;&gt;d Ax&lt;/h2&gt;
&lt;p&gt;(2024-01-13)&lt;/p&gt;
&lt;p&gt;Source video: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/e73033jZTCI?si=Qf1J1J7YbBsp9OVs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Derivative of a Matrix : Data Science Basics - ritvikmath&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Matrix 𝐀() stands for a &lt;strong&gt;linear transformation&lt;/strong&gt; (function).
And only the derivative of a &lt;strong&gt;function&lt;/strong&gt; (𝐀𝐱) makes sense.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Matrix is a representation of linear systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\begin{aligned}
f(x) &amp;amp;= 𝐀𝐱 \\
&amp;amp;= \begin{bmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \end{bmatrix}
\begin{bmatrix} x₁ \\ x_2 \end{bmatrix}   \\
&amp;amp;= \begin{bmatrix} x₁ + 2 x₂ \\ 3x₁ + 4x₂ \end{bmatrix}
⇒ \begin{bmatrix} f₁(x₁,x₂) \\ f₂(x₁,x₂) \end{bmatrix}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;$$
\frac{d𝐀𝐱}{d𝐱} =
\begin{bmatrix}
∂f₁/∂x₁ &amp;amp; ∂f₁/∂x₂ \\
∂f₂/∂x₁ &amp;amp; ∂f₂/∂x₂ \end{bmatrix}=
\begin{bmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;The derivative of the &lt;strong&gt;linear transformation&lt;/strong&gt; 𝐀𝐱 w.r.t. x is A. It analog to single-variable function.&lt;/p&gt;
&lt;p&gt;A matrix $A$ is a &amp;ldquo;scalar&amp;rdquo;. More concretely, it&amp;rsquo;s a collection of scalars in a box.&lt;/p&gt;
&lt;p&gt;Therefore, the derivative of A means the derivative of a constant, which would be 0. So, it doesn&amp;rsquo;t make any sense.&lt;/p&gt;
&lt;p&gt;Thereby, we are &lt;strong&gt;not&lt;/strong&gt; calculating the derivative of a matrix, but the derivative of a &lt;strong&gt;linear transformation&lt;/strong&gt; 𝐀𝐱 w.r.t. 𝐱.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;d-xᵀax&#34;&gt;d xᵀAx&lt;/h2&gt;
&lt;p&gt;$$
\begin{aligned}
𝐱ᵀ𝐀𝐱 &amp;amp;=
\begin{bmatrix} x₁ &amp;amp; x₂ \end{bmatrix}
\begin{bmatrix} a₁₁ &amp;amp; a₁₂ \\ a₂₁ &amp;amp; a₂₂ \end{bmatrix}
\begin{bmatrix} x₁ \\ x₂ \end{bmatrix} \\
&amp;amp;=
\begin{bmatrix} x₁ &amp;amp; x₂ \end{bmatrix}
\begin{bmatrix} a₁₁x₁+ a₁₂x₂ \\ a₂₁x₁ + a₂₂x₂ \end{bmatrix} \\
&amp;amp;= a₁₁x₁²+ a₁₂x₁x₂ + a₂₁x₁x₂ + a₂₂x₂²
⇒  f(x₁,x₂)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Consider 𝐀 is a &lt;strong&gt;symmetric&lt;/strong&gt; matrix, so a₂ = a₃.
Then, $𝐱ᵀ𝐀𝐱 = a₁₁x₁²+ a₁₂x₁x₂ + a₂₁x₁x₂ + a₂₂x₂² = f(x₁,x₂)$&lt;/p&gt;
&lt;p&gt;The derivative of the linear transformation 𝐱ᵀ𝐀𝐱:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\frac{d𝐱ᵀ𝐀𝐱}{d𝐱} &amp;amp;=
\begin{bmatrix} ∂f/∂x₁ \\ ∂f/∂x₂ \end{bmatrix}   \\
&amp;amp;= \begin{bmatrix} 2a₁₁x₁+2a₁₂x₂ \\ 2a₁₂x₂ + 2a₂₂x₂ \end{bmatrix} \\
&amp;amp;= 2 \begin{bmatrix} a₁₁ &amp;amp; a₁₂ \\ a₁₂ &amp;amp; a₂₂ \end{bmatrix}
\begin{bmatrix} x₁ \\ x₂ \end{bmatrix} \\
&amp;amp;= 2𝐀𝐱
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s an analog to quadratic of matrix operations.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-cases&#34;&gt;3 cases&lt;/h2&gt;
&lt;p&gt;Source article: &lt;a class=&#34;link&#34; href=&#34;https://mathinsight.org/derivative_matrix&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The derivative matrix - Math Insight&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A matrix 𝐀 contains elements that are functions of &lt;strong&gt;a scalar&lt;/strong&gt; x.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The $\frac{d𝐀}{dx}$ is a matrix of the same size as 𝐀.&lt;/p&gt;
&lt;p&gt;Refer to &lt;em&gt;Definition 5&lt;/em&gt; in &lt;a class=&#34;link&#34; href=&#34;https://atmos.washington.edu/~dennis/MatrixCalculus.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Matrix Differentiation -  Department of Atmospheric Sciences&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The derivative of a &lt;strong&gt;multi-variable scalar-valued function&lt;/strong&gt; $f$ is a matrix of partial derivatives
of each function with respect to each variable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Derivative of 𝐟 w.r.t. each coordinate axis.&lt;/li&gt;
&lt;li&gt;$\frac{df}{d𝐱} = [ \frac{∂f}{∂x₁}\ \frac{∂f}{∂x₂}\ ⋯ \ \frac{∂f}{∂xₙ} ]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A matrix 𝐀 contains elements that are functions of &lt;strong&gt;a vector&lt;/strong&gt; 𝐱.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$𝐀(𝐱) = 𝐟(𝐱) = (f_1(𝐱),\ f_2(𝐱),\ &amp;hellip;, f_m(𝐱)) = \begin{bmatrix} f_1(𝐱) \\ f_2(𝐱) \\ ⋮ \\ f_m(𝐱) \end{bmatrix}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The $\frac{d𝐀}{d𝐱}$ is a matrix with the size of mxn:&lt;/p&gt;
&lt;p&gt;$$
\frac{d𝐀}{d𝐱} =
\begin{bmatrix}
\frac{f_1}{x_1} &amp;amp; \frac{f_1}{x_2} &amp;amp; ⋯ &amp;amp; \frac{f_1}{xₙ} \\
\frac{f_2}{x_1} &amp;amp; \frac{f_2}{x_2} &amp;amp; ⋯ &amp;amp; \frac{f_2}{xₙ} \\
⋮   &amp;amp;   ⋮   &amp;amp;   ⋮   &amp;amp;   ⋮ \\
\frac{f_m}{x_1} &amp;amp; \frac{f_m}{x_2} &amp;amp; ⋯ &amp;amp; \frac{f_m}{xₙ} \\
\end{bmatrix}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;matrix-derivative&#34;&gt;Matrix derivative&lt;/h2&gt;
&lt;p&gt;(2023-02-12)&lt;/p&gt;
&lt;p&gt;Matrix derivatie is in terms of the whole matrix, instead of each element.
Whereas partial derivatives of a matrix&lt;/p&gt;
&lt;p&gt;Given a matrix $[^{a\ b}_{d\ c}]$,the derivative of its inverse matrix
$\frac{1}{ac-bd}[^{\ c\ -b}_{-d\ a}]$ w.r.t. the original matrix  is the &amp;ldquo;coefficient&amp;rdquo; in their relation:&lt;/p&gt;
&lt;p&gt;$$
\underbrace{
\begin{bmatrix} c &amp;amp; -b \\ -d &amp;amp; a \end{bmatrix}
\frac{1}{ac-bd}
\begin{bmatrix} c &amp;amp; -b \\ -d &amp;amp; a \end{bmatrix}
}_{\text{Coefficient}}
\begin{bmatrix} a &amp;amp; b \\ d &amp;amp; c \end{bmatrix} =
\begin{bmatrix} c &amp;amp; -b \\ -d &amp;amp; a \end{bmatrix}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This transformation can be understood as that the original matrix first times its inverse $\frac{1}{ac-bd}[^{\ c\ -b}_{-d\ a}]$
to become the identity matrix $[^{1\ 0}_{0\ 1}]$,
which gets multiplied by $[^{\ c\ -b}_{-d\ a}]$ to yield the inverse matrix.&lt;/p&gt;
&lt;p&gt;Therefore, the coefficient is:&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{ac-bd}
\begin{bmatrix} c &amp;amp; -b \\ -d &amp;amp; a \end{bmatrix}
\begin{bmatrix} c &amp;amp; -b \\ -d &amp;amp; a \end{bmatrix} =
\frac{1}{ac-bd}
\begin{bmatrix} c² + bd &amp;amp; -bc-ab \\ -cd-ad &amp;amp; bd+a²\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;In this case, is the optimizing objective the whole matrix $[^{a\ b}_{d\ c}]$, with its coefficient serving as the gradient?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.perplexity.ai/search/What-is-the-i89Ts1nCSD6Td7vCTFWF9A?s=u&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;perplexity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;On the other hand, the &lt;strong&gt;partial&lt;/strong&gt; derivatives of the inverse matrix $\frac{1}{ac-bd}[^{\ c\ -b}_{-d\ a}]$
with respect to each element a, b, c, d can be conceptualized as:&lt;/p&gt;
&lt;p&gt;how does changes in the 4 &amp;ldquo;variables&amp;rdquo; $a,\ b,\ c,\ d$ affect the matrix $\frac{1}{ac-bd}[^{\ c\ -b}_{-d\ a}]$&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\frac{ ∂\frac{1}{ac-bd} \begin{bmatrix} c &amp;amp; -b \\ -d &amp;amp; a \end{bmatrix}}{∂a} &amp;amp;=
\begin{bmatrix}
\frac{∂}{∂a} (\frac{c}{ac-bd} ) &amp;amp;
\frac{∂}{∂a} (\frac{-b}{ac-bd}) \\
\frac{∂}{∂a} (\frac{-d}{ac-bd}) &amp;amp;
\frac{∂}{∂a} (\frac{a}{ac-bd} ) \\
\end{bmatrix} \\
&amp;amp;=
\begin{bmatrix}
\frac{-c²}{(ac-bd)²}  &amp;amp;
\frac{bc}{(ac-bd)²} \\
\frac{dc}{(ac-bd)²} &amp;amp;
\frac{-bd}{(ac-bd)²}  \\
\end{bmatrix}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;The total change of the matrix magnitude caused by moving $a$ by one unit would be:&lt;/p&gt;
&lt;p&gt;$$\frac{∂ (\frac{1}{ac-bd} [^{\ c\ -b}_{-d\ a}] )}{∂a} = \frac{-c² + bc + dc - bd}{(ac-bd)²} $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Particularly, with this derivative, $a$ can be optimized via gradient descent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similarly, the partial derivatives of the matrix w.r.t. $b,\ c,\ d$ are:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\frac{∂ (\frac{1}{ac-bd} [^{\ c\ -b}_{-d\ a}] )}{∂b} &amp;amp;= \frac{cd-ac-d²+ad}{(ac-bd)²} \\
\frac{∂ (\frac{1}{ac-bd} [^{\ c\ -b}_{-d\ a}] )}{∂c} &amp;amp;= \frac{-bd+ba+da-a²}{(ac-bd)²} \\
\frac{∂ (\frac{1}{ac-bd} [^{\ c\ -b}_{-d\ a}] )}{∂d} &amp;amp;= \frac{cb-b²-ac+ab}{(ac-bd)²} \\
\end{aligned}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(2024-02-13)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/ny-i8_9NtHA?si=QAlLL470p-cM5XU3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Matrix Derivatives: What&amp;rsquo;s up with all those transposes ? - David Levin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gradient: Matrix form -&amp;gt; indices form -&amp;gt; matrix form&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.matrixcalculus.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Matrix Calculus - Online&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;xᵀwx&#34;&gt;XᵀwX&lt;/h2&gt;
&lt;p&gt;(2024-04-06)&lt;/p&gt;
&lt;p&gt;拆分成：向量函数 + 多元函数&lt;/p&gt;
&lt;p&gt;空间的基可以是多项式函数, 幂函数, 所以线性方程可以表示非线性函数&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1PD42157sU/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【微积分和线性代数碰撞的数学盛宴：最小二乘法公式推导！】-晓之车高山老师 - bilibili&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>memo: Calc | Change of Variables Theorem</title>
        <link>https://zichen34.github.io/writenotes/calc/change_of_variables/</link>
        <pubDate>Mon, 27 Nov 2023 19:30:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/change_of_variables/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;换元法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The area of a cube in orthogonal coordinate system and the spherical coordinate system.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/368888687/answer/992671463&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;直角坐标与极坐标的互化中，为什么 dxdy=rdrdθ？ - 予一人的回答 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;立体角&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/270842108/answer/1448277431&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何推导柱坐标，球坐标的体积元和极坐标的面积元？ - 半个冯博士的回答 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/lCKxeRiBdjQ?si=rnEfwIefJWD1VOfx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Change of variables | MIT 18.02SC Multivariable Calculus, Fall 2010&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/4XiUig8mzNc?si=MdoWyOBOQ9TA1iTw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Change of variables (single integral and substitution) | Lecture 30 | Vector Calculus for Engineers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/hhFzJvaY__U?si=6lJr8F4lPAdtw_KT&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Change of Variables and the Jacobian - Serpentine Integral&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An infinitesimal area varies in different coordinate system because shapes of a unit area are distinct.
In other words, different coordinate systems have varous scales.&lt;/p&gt;
&lt;p&gt;In polar coordinate system:&lt;/p&gt;
&lt;p&gt;$$ x = r⋅cosθ \\ y = r⋅sinθ $$&lt;/p&gt;
&lt;p&gt;Jacobian matrix is a &lt;strong&gt;function&lt;/strong&gt; that depicts how much each dimension of the source space should be &lt;strong&gt;scaled&lt;/strong&gt; to
align with another coordinate system at an arbitrary position.&lt;/p&gt;
&lt;p&gt;The scale factor is the &lt;strong&gt;ratio&lt;/strong&gt; between a target dimension and a source dimension.
Thus, by multiplying those factors, the source space will be scaled to the target space.&lt;/p&gt;
&lt;p&gt;$$
𝐉 = \begin{bmatrix} \frac{dx}{dr} &amp;amp; \frac{dx}{dθ} \\ \\
\frac{dy}{dr} &amp;amp; \frac{dy}{dθ} \end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Because an infinitesimal area $dx⋅dy$ &lt;strong&gt;only has magnitude&lt;/strong&gt; (without direction),
the area scaling factor should be just a &lt;strong&gt;positive real number&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To make the area in the source space to be the same in the target space, the scaling factor should be the &lt;strong&gt;ratio of two unit areas&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;$$
\frac{d(x,y)}{d(r,θ)}
$$&lt;/p&gt;
&lt;p&gt;That is $f(x,y) = g(r,θ) dx dy$, so the integrated areas equals:&lt;/p&gt;
&lt;p&gt;$$
∬_D f(x,y) dx dy = ∬_E g(r,θ) dx dy = ∬_E g(r,θ) ∂(x,y)/∂(r,θ) drdθ
$$&lt;/p&gt;
&lt;p&gt;And the calculation of an area is just the cumulative product of every dimensions.&lt;/p&gt;
&lt;p&gt;Therefore, the &lt;strong&gt;abosolute value of the determinant&lt;/strong&gt; of the Jacobian matrix is taken.&lt;/p&gt;
&lt;p&gt;$$
|det(𝐉)| = |dx/dr * dy/dθ - dx/dθ * dy/dr | = |cosθ&lt;em&gt;rcosθ - rsinθ&lt;/em&gt;(-sinθ)| = |r|
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://math.libretexts.org/Bookshelves/Calculus/Book%3A_Active_Calculus_%28Boelkins_et_al.%29/11%3A_Multiple_Integrals/11.09%3A_Change_of_Variables&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;11.9: Change of Variables - Mathematics LibreTexts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;(2023-11-28)&lt;/p&gt;
&lt;p&gt;The determinant of Jacobian matrix is responsible for the infinitesimal area, not the integrand.&lt;/p&gt;
&lt;p&gt;The new integrand is just substituting the old variable with the tranformation with new variable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;f(x,y) -&amp;gt; g(rcosθ, rsinθ)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dxdy -&amp;gt; r drdθ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f(x,y) = g(rcosθ, rsinθ) * r&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The change of variables theorem has two aspects:&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 336 89&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 64,0 L 88,0&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 248,0 L 264,0&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 72,64 L 88,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 248,64 L 272,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,16 L 64,0&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 272,64 L 280,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,48 L 64,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 272,0 L 280,16&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;80.000000,64.000000 68.000000,58.400002 68.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(180.000000, 72.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;96.000000,0.000000 84.000000,-5.600000 84.000000,5.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 88.000000, 0.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;256.000000,64.000000 244.000000,58.400002 244.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(180.000000, 248.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;272.000000,0.000000 260.000000,-5.600000 260.000000,5.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 264.000000, 0.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;0&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;f&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;x&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;y&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;C&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;M&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;u&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;n&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;g&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;i&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;i&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;p&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;n&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;160&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;g&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;160&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;y&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;176&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;v&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;176&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;|&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;d&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;192&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;r&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;192&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;i&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;b&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;J&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;|&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;280&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;g&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;288&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;296&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;r&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;304&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;312&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;θ&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;320&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>memo: Calc | Convolution with Impulses</title>
        <link>https://zichen34.github.io/writenotes/calc/convol_impulses/</link>
        <pubDate>Mon, 20 Nov 2023 11:40:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/convol_impulses/</guid>
        <description>&lt;p&gt;Source video: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/1pJ5ie2hX1M&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Continuous time convolution with impulses - ProfKathleen&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;convolution&#34;&gt;Convolution&lt;/h2&gt;
&lt;p&gt;For example, there is a man keep eating all the time.
$f(t)$ is the food eaten at time t, and $h(t)$ is the food mass changing function for a period of digestion time t.
For example, after the duration $(t-τ)$ of digestion, the amount of food eaten at time $τ$ becomes $h(t-τ)$.&lt;/p&gt;
&lt;p&gt;Therefore, the &lt;strong&gt;total food reamined&lt;/strong&gt; in stomach at time t is f convolving with h:&lt;/p&gt;
&lt;p&gt;$$
y(t) = f(t) * h(t) = ∫_{-∞}^{+∞}f(τ)⋅h(t-τ) dτ
$$&lt;/p&gt;
&lt;p&gt;Intuitively, the value $x(τ)$ is scaled by a factor from τ time ago.
Thus, the function $h(t)$ looks like in reverse.&lt;/p&gt;
&lt;p&gt;Given $f = x(t)$ and $h = δ(t)$, the existing amount at time t is:&lt;/p&gt;
&lt;p&gt;$$
y(t) = f * h = ∫_{-∞}^{+∞} x(τ) h(t-τ) dτ
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;delta-function&#34;&gt;Delta function&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$δ(τ)$:&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 240 73&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 0,32 L 48,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,32 L 104,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,0 L 48,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;56.000000,0.000000 44.000000,-5.600000 44.000000,5.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 48.000000, 0.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;112.000000,32.000000 100.000000,26.400000 100.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 104.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;τ&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$δ(τ-3)$: Right shift $δ(τ)$ by 3.&lt;/p&gt;
&lt;p&gt;Where the 0 was becomes -3. Therefore, all the coordinates minus 3, i.e., τ becomes τ-3.&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 264 73&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 0,32 L 72,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 72,32 L 128,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 72,0 L 72,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;80.000000,0.000000 68.000000,-5.600000 68.000000,5.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 72.000000, 0.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;136.000000,32.000000 124.000000,26.400000 124.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 128.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;τ&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$δ(-τ-3)$: Rverse $δ(τ-3)$:&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 264 73&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 0,32 L 16,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,32 L 128,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,0 L 16,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;24.000000,0.000000 12.000000,-5.600000 12.000000,5.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 16.000000, 0.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;136.000000,32.000000 124.000000,26.400000 124.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 128.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;τ&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$δ(t-τ-3)$: Shift $δ(τ-3)$ to t, which is a constant.&lt;/p&gt;
&lt;p&gt;Where the τ-3 = 0 becomes t, so all coordinate plus t:&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 264 73&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 0,32 L 16,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,32 L 128,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,0 L 16,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;24.000000,0.000000 12.000000,-5.600000 12.000000,5.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 16.000000, 0.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;136.000000,32.000000 124.000000,26.400000 124.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 128.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;τ&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;convolve-with-impulse&#34;&gt;Convolve with Impulse&lt;/h2&gt;
&lt;p&gt;Given $x(t)$&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 280 73&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 0,32 L 48,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,48 L 96,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,32 L 64,0&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;104.000000,48.000000 92.000000,42.400002 92.000000,53.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 96.000000, 48.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;The existing amount of a system containing two functions x(t) and δ(t-3) at time t is:&lt;/p&gt;
&lt;p&gt;$$
y(t) = x(t) * δ(t-3) = ∫_{-∞}^{+∞} x(τ) δ(t-τ-3) dτ
$$&lt;/p&gt;
&lt;p&gt;Multiply x(τ) by the reversed impluse:&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 296 89&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 0,32 L 16,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,32 L 64,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,48 L 16,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,48 L 112,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,16 L 16,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,32 L 16,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,32 L 80,0&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;24.000000,16.000000 12.000000,10.400000 12.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 16.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;120.000000,48.000000 108.000000,42.400002 108.000000,53.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 112.000000, 48.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;τ&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;Delta function is 0 except for τ = t-3, therefore, only x(t-3) will be computed:&lt;/p&gt;
&lt;p&gt;$$
y(t) = x(t) * δ(t-3) = ∫_{-∞}^{+∞} x(t-3) δ(t-τ-3) dτ
$$&lt;/p&gt;
&lt;p&gt;And in that integral, x(t-3) has nothing to do with τ, so it can be pulled outside the integral:&lt;/p&gt;
&lt;p&gt;$$
y(t) = x(t) * δ(t-3) = x(t-3) ∫_{-∞}^{+∞}  δ(t-τ-3) dτ \\
= x(t-3)*1 \\
= x(t-3)
$$&lt;/p&gt;
&lt;p&gt;By convolving with an impulse function, x(t) is shifted (based on the origin) to where the impulse is.&lt;/p&gt;
&lt;p&gt;This conclusion can be generalized to any f.&lt;/p&gt;
&lt;h2 id=&#34;box-function&#34;&gt;Box function&lt;/h2&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 472 105&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 32,0 L 80,0&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 368,0 L 416,0&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,32 L 32,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,32 L 80,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,32 L 120,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 176,32 L 208,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 208,32 L 240,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 304,32 L 336,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 336,32 L 368,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 368,32 L 416,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 416,32 L 432,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,0 L 32,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,0 L 80,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 208,0 L 208,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 368,0 L 368,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 416,0 L 416,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;128.000000,32.000000 116.000000,26.400000 116.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 120.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;216.000000,0.000000 204.000000,-5.600000 204.000000,5.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 208.000000, 0.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;248.000000,32.000000 236.000000,26.400000 236.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 240.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;440.000000,32.000000 428.000000,26.400000 428.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 432.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;0&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;f&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;✶&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;δ&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;240&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;248&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;256&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;280&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;=&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;304&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;336&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;360&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;y&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;368&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;368&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;376&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;384&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;416&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;448&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;h2 id=&#34;two-impulses&#34;&gt;Two impulses&lt;/h2&gt;
&lt;p&gt;Convolution is linear. Compute separately and &lt;strong&gt;sum&lt;/strong&gt; together.&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 536 137&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 0,64 L 32,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,64 L 80,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,64 L 112,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,64 L 192,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,64 L 264,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 264,64 L 288,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 336,64 L 360,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 360,64 L 408,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 408,64 L 440,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 440,64 L 464,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,16 L 192,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 264,32 L 264,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 360,16 L 360,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,64 L 56,16&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 360,64 L 384,16&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 408,64 L 424,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,16 L 80,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 384,16 L 408,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 424,32 L 440,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;120.000000,64.000000 108.000000,58.400002 108.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 112.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;200.000000,16.000000 188.000000,10.400000 188.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 192.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;272.000000,32.000000 260.000000,26.400000 260.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 264.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;296.000000,64.000000 284.000000,58.400002 284.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 288.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;368.000000,16.000000 356.000000,10.400000 356.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 360.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;472.000000,64.000000 460.000000,58.400002 460.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 464.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;0&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;f&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;✶&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;168&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;192&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;δ&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;240&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;264&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;264&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;272&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;/&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;280&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;304&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;320&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;=&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;336&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;360&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;384&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;392&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;y&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;400&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;408&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;408&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;416&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;440&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;440&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;6&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;448&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;/&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;456&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;480&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;h2 id=&#34;impulse-train&#34;&gt;Impulse train&lt;/h2&gt;
&lt;p&gt;Convolving with a infinite sum of delta function: $Σ_{n=-∞}^{+∞} δ(t-n)$&lt;/p&gt;
&lt;p&gt;The replicas of the signal overlaps:&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 368 313&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 32,32 L 48,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,64 L 32,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,64 L 64,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,64 L 96,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,64 L 176,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 176,64 L 192,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,64 L 208,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 208,64 L 224,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 224,64 L 240,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,64 L 272,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,208 L 48,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,208 L 64,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,208 L 80,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,208 L 96,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,240 L 32,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,240 L 48,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,240 L 64,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,240 L 80,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,240 L 96,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 96,240 L 112,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 184,240 L 216,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 216,240 L 232,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 232,240 L 248,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 248,240 L 264,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 264,240 L 280,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 280,240 L 336,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,32 L 32,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,208 L 32,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,208 L 48,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,0 L 64,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,176 L 64,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,208 L 64,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,176 L 80,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,208 L 80,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 96,176 L 96,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 96,208 L 96,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 176,32 L 176,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,32 L 192,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 208,32 L 208,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 224,32 L 224,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,32 L 240,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,144 L 240,192&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 264,144 L 264,192&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 288,144 L 288,192&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 312,144 L 312,192&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,32 L 64,0&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,208 L 64,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,208 L 80,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,208 L 96,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 216,192 L 240,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,192 L 264,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 264,192 L 288,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 288,192 L 312,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;104.000000,64.000000 92.000000,58.400002 92.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 96.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;120.000000,240.000000 108.000000,234.399994 108.000000,245.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 112.000000, 240.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;184.000000,32.000000 172.000000,26.400000 172.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 176.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;200.000000,32.000000 188.000000,26.400000 188.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 192.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;216.000000,32.000000 204.000000,26.400000 204.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 208.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;232.000000,32.000000 220.000000,26.400000 220.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 224.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;248.000000,32.000000 236.000000,26.400000 236.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 240.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;280.000000,64.000000 268.000000,58.400002 268.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 272.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;344.000000,240.000000 332.000000,234.399994 332.000000,245.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 336.000000, 240.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;0&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;0&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;f&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;292&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;y&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;292&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;292&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;292&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;✶&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;212&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;s&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;212&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;u&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;212&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;168&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;176&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;192&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;δ&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;292&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;y&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;240&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;240&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;240&#39; y=&#39;292&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;248&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;248&#39; y=&#39;292&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;256&#39; y=&#39;292&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;288&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;296&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;=&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;352&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>watch: LA - G.S. 21 | Eigenvalues &amp; Eigenvectors</title>
        <link>https://zichen34.github.io/writenotes/calc/eigenvalues_vectors/</link>
        <pubDate>Mon, 06 Nov 2023 13:51:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/eigenvalues_vectors/</guid>
        <description>&lt;p&gt;Source video: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/cdZnhQjJu4I?si=G0vs_L9BZZA741BN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;21. Eigenvalues and Eigenvectors - Gilbert Strang - MIT OpenCourseWare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(2023-11-06) The 1st-time recitation note. Haven&amp;rsquo;t re-check.&lt;/p&gt;
&lt;h2 id=&#34;out-direction-same-as-in&#34;&gt;Out direction same as in&lt;/h2&gt;
&lt;p&gt;Matrix multiply vector acting like MLP, where all current dimensions are combined in different weights to produce each dimension in another space.&lt;/p&gt;
&lt;p&gt;$$
𝐀 𝐗  \\
\begin{bmatrix} y_1 \\ y_2 \\ y_3 \end{bmatrix} =
𝐀 \begin{bmatrix} x_1 \\ x_2 \end{bmatrix}
$$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Matrix 𝐀 is like a &lt;strong&gt;function&lt;/strong&gt; that takes as input 𝐗 and output 𝐀𝐗.&lt;/li&gt;
&lt;li&gt;Typically, 𝐀𝐗 points in different direction from the input 𝐗.&lt;/li&gt;
&lt;li&gt;Eigenvectors are those 𝐗 make &lt;strong&gt;𝐀𝐗 parallels to 𝐗&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Parallel means scaling: 𝐀𝐗 = λ𝐗, where the &lt;strong&gt;multiplier&lt;/strong&gt; λ is eigenvalue.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given a matrix 𝐀, how to solve its eigenvalues λ and eigenvectors 𝐗?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If λ = 0, 𝐗 solved from 𝐀𝐗 = 0 by elimination is 𝟎, which is useless.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some hints can be found through the following examples&lt;/p&gt;
&lt;h2 id=&#34;projection-matrix&#34;&gt;Projection matrix&lt;/h2&gt;
&lt;p&gt;Given a projection matrix 𝐏, a 3D vector is projected on to a plane.&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 264 201&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 24,96 L 80,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,96 L 168,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,16 L 24,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,112 L 96,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 96,80 L 120,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 112,112 L 128,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 112,176 L 152,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,96 L 48,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,112 L 112,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,48 L 96,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 96,80 L 112,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 120,32 L 152,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;32.000000,16.000000 20.000000,10.400000 20.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 24.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;60.000000,144.000000 48.000000,138.399994 48.000000,149.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(60.000000, 48.000000, 144.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;92.000000,48.000000 80.000000,42.400002 80.000000,53.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(240.000000, 80.000000, 48.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;140.000000,80.000000 128.000000,74.400002 128.000000,85.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(300.000000, 128.000000, 80.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;176.000000,96.000000 164.000000,90.400002 164.000000,101.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 168.000000, 96.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;z&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;x&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;p&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;n&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;y&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Eigenvectors 𝐗 should &lt;strong&gt;parallel&lt;/strong&gt; to the projected vectors 𝐏𝐗.
So the vectors located in the plane all are eigenvectors, as
$𝐏𝐗=𝐗$, with λ=1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vectors perpendicular to the plane statisfy: $𝐏𝐗=0$, i.e., λ=0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Those two &lt;strong&gt;sets&lt;/strong&gt; of &lt;strong&gt;eigenvectors are perpendicular&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;permutation-matrix&#34;&gt;Permutation matrix&lt;/h2&gt;
&lt;p&gt;Given the 2D permutation matrix $𝐀=[^{0 \ 1}_{1 \ 0}]$, which vector can make 𝐀𝐗=𝐗, i.e., identical after permutation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;𝐗 = $[^1_1]$, with λ=1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As 𝐀 is a 2D matrix, there should be 2 eigenvalues.
Which vector can statisfy λ=-1 ?&lt;/p&gt;
&lt;p&gt;𝐗 = $[^{-1}_1]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The 2 sets of eigenvectors 𝐗 are perpendicular as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fact: The sum of eigenvalues equals to the sum of elements on diagonal of 𝐀.&lt;/p&gt;
&lt;p&gt;Here, there is 1 + (-1) = 0 + 0.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;how-to-solve-λ-𝐗&#34;&gt;How to solve λ, 𝐗&lt;/h2&gt;
&lt;p&gt;Trick: Rearrange to 𝐀𝐗 - λ𝐗 = 0.&lt;/p&gt;
&lt;p&gt;If there is $(𝐀 - λ𝐈)𝐗 = 0$ and 𝐗, a non-zero vector, becomes 0 after multiplied by (𝐀 - λ𝐈),
the (𝐀 - λ𝐈) must be sigular: determinant is 0.&lt;/p&gt;
&lt;p&gt;The formula $𝐀 - λ𝐈 = 0$ doesn&amp;rsquo;t include 𝐗, so eigenvalues &lt;strong&gt;λ can be solved first&lt;/strong&gt;, as in the example below.&lt;/p&gt;
&lt;h2 id=&#34;plus-multiple-identity&#34;&gt;Plus multiple identity&lt;/h2&gt;
&lt;p&gt;Given a matrix 𝐀 = $[^{3 \ 1}_{1 \ 3}]$, to calculate λ, solve:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
| 𝐀 - λ𝐈 | = 0  \\
\begin{bmatrix} 3-λ &amp;amp; 1 \\ 1 &amp;amp; 3-λ \end{bmatrix} = 0 \\
(3-λ)^2 -1 = 0 \\
λ^2 - 6λ + 8 = 0 \\
(λ-4)(λ-2) = 0
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Two roots: λ₁=4, λ₂=2. Then solve the 2 sets of eigenvectors.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For λ₁=4,&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
(𝐀 - λ𝐈)𝐗 = 0   \\
\begin{bmatrix} -1 &amp;amp; 1 \\ 1 &amp;amp; -1 \end{bmatrix} 𝐗 = 0 \\
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;By letting the free variable to 1, 𝐗 can be solved as $[^1_1]$.&lt;/p&gt;
&lt;p&gt;Hence, one of eigenvectors is $[^1_1]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For λ₂=2,&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
(𝐀 - λ𝐈)𝐗 = 0   \\
\begin{bmatrix} 1 &amp;amp; 1 \\ 1 &amp;amp; 1 \end{bmatrix} 𝐗 = 0 \\
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Hence, one of eigenvectors is $[^{-1}_1]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The sum of the two eigenvalues is the trace of 𝐀, and their product is the determinant of 𝐀.&lt;/p&gt;
&lt;p&gt;Comparing the matrix $[^{3 \ 1}_{1 \ 3}]$ and the permutation matrix $[^{0 \ 1}_{1 \ 0}]$, there is:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;$[^{3 \ 1}_{1 \ 3}]$&lt;/th&gt;
&lt;th&gt;$[^{0 \ 1}_{1 \ 0}]$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;λ&lt;/td&gt;
&lt;td&gt;4 and 2&lt;/td&gt;
&lt;td&gt;1 and -1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;𝐗&lt;/td&gt;
&lt;td&gt;$[^1_1]$ and $[^{-1}_1]$&lt;/td&gt;
&lt;td&gt;$[^1_1]$ and $[^{-1}_1]$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If $𝐀𝐗 =λ𝐗$, then $(𝐀+3𝐈)𝐗= 𝐀𝐗+3𝐈𝐗 = (λ+3𝐈)𝐗$&lt;/p&gt;
&lt;p&gt;That means, if 𝐀 plus 3𝐈, then eigenvalues λ will plus 3𝐈, while eigenvectors doesn&amp;rsquo;t change.&lt;/p&gt;
&lt;h3 id=&#34;cant-generalize&#34;&gt;Can&amp;rsquo;t generalize&lt;/h3&gt;
&lt;p&gt;However, th above property (for &lt;strong&gt;multiple identity&lt;/strong&gt;) can&amp;rsquo;t be generalized to plusing an arbitrary matrix 𝐁.&lt;/p&gt;
&lt;p&gt;Matrix addition doesn&amp;rsquo;t imply eigenvalues addition, because
the eigenvector of 𝐁 is typically not 𝐗. Therefore,
the following addition can&amp;rsquo;t be performed:&lt;/p&gt;
&lt;p&gt;$$
𝐀𝐗 =λ𝐗  \\
𝐁𝐗 =α𝐗  \\
(𝐀+𝐁)𝐗 = (λ+α)𝐗
$$&lt;/p&gt;
&lt;h2 id=&#34;complex-eigenvalues&#34;&gt;Complex eigenvalues&lt;/h2&gt;
&lt;p&gt;Considering rotation matrix:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\begin{bmatrix} cosθ \\ sinθ \end{bmatrix} =
\begin{bmatrix} cosθ &amp;amp; -sinθ \\ sinθ &amp;amp; cosθ \end{bmatrix}
\begin{bmatrix} 1 \\ 0 \end{bmatrix}
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Let θ be 90°, the rotation matrix is $[^{0 \ -1}_{1 \ 0}]$.&lt;/p&gt;
&lt;p&gt;However, according to the theory &amp;ldquo;eigenvector outcomes in the direction that it went in&amp;rdquo;, there seems to be
no eigenvector intuitively, as any vector gets in will rotate 90 degree by this matrix.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Solve its eigenvalues:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
| 𝐀 - λ𝐈 | = 0  \\
|\begin{bmatrix} 0 &amp;amp; -1 \\ 1 &amp;amp; 0 \end{bmatrix} -
\begin{bmatrix} λ &amp;amp; 0 \\ 0 &amp;amp; λ \end{bmatrix}| =
\begin{vmatrix} -λ &amp;amp; -1 \\ 1 &amp;amp; -λ \end{vmatrix} = 0 \\
λ^2 + 1 = 0
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Two roots: λ₁=i, λ₂=-i&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anti-symmetric matrix&lt;/strong&gt; has imaginary eigenvalues which are always in pairs, as they&amp;rsquo;re complex conjugate.
While a symmetrix matrix&amp;rsquo;s eigenvalues are all real numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solve eigenvectors 𝐗:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For λ₁=i,&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
(𝐀 - λ𝐈) 𝐗 = 0  \\
\begin{bmatrix} 0-λ₁ &amp;amp; -1 \\ 1 &amp;amp; 0-λ₁ \end{bmatrix}
\begin{bmatrix} a \\ b \end{bmatrix} = 0 \\
\begin{bmatrix} -i &amp;amp; -1 \\ 1 &amp;amp; -i \end{bmatrix}
\begin{bmatrix} a \\ b \end{bmatrix} = 0 \\
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Let the free variable b=1, then $[^a_b] = [^i_1]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For λ₁= -i,&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\begin{bmatrix} i &amp;amp; -1 \\ 1 &amp;amp; i \end{bmatrix}
\begin{bmatrix} a \\ b \end{bmatrix} = 0 \\
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Let the free variable b=1, then $[^a_b] = [^{-i}_1]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;repeated-eigenvalues&#34;&gt;Repeated eigenvalues&lt;/h2&gt;
&lt;p&gt;Eigenvalues of a triangular matrix is obvious: the diagonal, as
the determinant is directly factorized.&lt;/p&gt;
&lt;p&gt;For example, given matrix $𝐀 = [^{3 \ 1}_{0 \ 3}]$:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Solve its eigenvalues:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
| 𝐀 - λ𝐈 | = 0  \\
\begin{vmatrix} 3-λ &amp;amp; 1 \\ 0 &amp;amp; 3-λ \end{vmatrix} = 0 \\
(3-λ)(3-λ)
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Two roots: λ₁=3, λ₂= 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solve eigenvectors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For λ₁=3,&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
(𝐀 - λ𝐈) 𝐗 = 0 \\
\begin{bmatrix} 3-λ₁ &amp;amp; 1 \\ 0 &amp;amp; 3-λ₁ \end{bmatrix}
\begin{bmatrix} a \\ b  \end{bmatrix} = 0  \\
\begin{bmatrix} 0 &amp;amp; 1 \\ 0 &amp;amp; 0 \end{bmatrix}
\begin{bmatrix} a \\ b  \end{bmatrix} = 0
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;So $[^a_b]$ can be $[^1_0]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For λ₂= 3, same formulas appear. There &lt;strong&gt;isn&amp;rsquo;t the 2nd&lt;/strong&gt; (set of) independent eigenvectors.&lt;/p&gt;
&lt;p&gt;But there are supposed to be two eigenvalues. It&amp;rsquo;s incomplete yet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>watch: Khan | Complex Number</title>
        <link>https://zichen34.github.io/writenotes/calc/complex_conjugates/</link>
        <pubDate>Mon, 26 Jun 2023 11:29:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/complex_conjugates/</guid>
        <description>&lt;p&gt;Source video: &lt;a class=&#34;link&#34; href=&#34;https://www.khanacademy.org/math/precalculus/x9e81a4f98389efdf:complex/x9e81a4f98389efdf:complex-div/v/complex-conjugates&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lesson 3: Complex conjugates and dividing complex numbers - Khan Academy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a complex number&lt;/p&gt;
&lt;p&gt;$$
z = \underset{↑}{2} + \underset{↑}{\underline{3}} i \\
\quad \quad  Re(z) \ Im(z)
$$&lt;/p&gt;
&lt;p&gt;where $2$ is a real number, $3i$ is an imaginary number.
The real part of z $Re(z)$ is 2, while the imaginary part of z $Im(z)$ is 3.&lt;/p&gt;
&lt;h2 id=&#34;complex-conjugate&#34;&gt;Complex conjugate&lt;/h2&gt;
&lt;p&gt;The complex conjugate of z is&lt;/p&gt;
&lt;p&gt;$$
\bar z \text{ or } z^* = 2 - 3i = \overline{2+3i}
$$&lt;/p&gt;
&lt;p&gt;where the real part Re(z*) remains the same, while the imaginary part Im(z*) has the opposite sign.&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 144 201&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 32,80 L 64,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,80 L 104,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,144 L 64,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,24 L 64,24&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,16 L 32,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,80 L 32,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,144 L 32,160&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,32 L 64,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,80 L 64,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,80 L 60,24&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,80 L 56,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,24 L 32,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,24 L 64,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,128 L 64,136&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;40.000000,16.000000 28.000000,10.400000 28.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 32.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;68.000000,32.000000 56.000000,26.400000 56.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(300.000000, 56.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;path d=&#39;M 56,128 L 64,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;74.000000,128.000000 62.000000,122.400002 62.000000,133.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(60.000000, 56.000000, 128.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;112.000000,80.000000 100.000000,74.400002 100.000000,85.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 104.000000, 80.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;I&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;b&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;b&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;z&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;z&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;*&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;R&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;This act like mirror reflecting over Real axis.&lt;/p&gt;
&lt;p&gt;The sum of a complex number and its complex conjugate is two times of its real part, 2Re(z):&lt;/p&gt;
&lt;p&gt;$$
z + \bar z = a + \cancel bi + a - \cancel bi = 2a = 2 Re(z) = 2 Re(\bar z)
$$&lt;/p&gt;
&lt;p&gt;Graphically, vector addition&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 160 185&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 32,80 L 56,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,80 L 80,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,80 L 120,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,16 L 32,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,80 L 32,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,144 L 32,160&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,80 L 56,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,80 L 56,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,32 L 80,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;40.000000,16.000000 28.000000,10.400000 28.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 32.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;68.000000,32.000000 56.000000,26.400000 56.000000,37.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(300.000000, 56.000000, 32.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;68.000000,128.000000 56.000000,122.400002 56.000000,133.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(60.000000, 56.000000, 128.000000)&#39;&gt;&lt;/polygon&gt;
&lt;path d=&#39;M 80,64 L 88,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;98.000000,64.000000 86.000000,58.400002 86.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(60.000000, 80.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;88.000000,80.000000 76.000000,74.400002 76.000000,85.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 80.000000, 80.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;128.000000,80.000000 116.000000,74.400002 116.000000,85.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 120.000000, 80.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;I&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;b&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;0&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;b&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;z&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;z&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;148&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;*&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;z&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;+&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;z&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;*&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;R&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;The product of a complex number and its complex conjugate is a real number, and it&amp;rsquo;s equal to the magnitude of the complex number squared:&lt;/p&gt;
&lt;p&gt;$$
z ⋅ \bar z = (a+bi) ⋅ (a-bi) = a² - (bi)² = a² + b² = |z|²
$$&lt;/p&gt;
&lt;p&gt;which is useful in the division of comple numbers:
multiply the numerator and denominator by the conjugate of the denominator to convert the division to one complex number&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
&amp;amp; \frac{1+2i}{4-5i} \\
&amp;amp; = \frac{1+2i}{4-5i} ⋅ \frac{4+5i}{4+5i} \\
&amp;amp; = \frac{(1+2i)(4+5i)}{4²-(5i)²} \\
&amp;amp; = \frac{4+5i + 8i-10}{16+25} \\
&amp;amp; = \frac{-6}{41} + \frac{13i}{41}
\end{aligned}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;factoring-sum-of-squares&#34;&gt;Factoring sum of squares&lt;/h2&gt;
&lt;p&gt;We can factor a &lt;strong&gt;difference of squares&lt;/strong&gt; as:&lt;/p&gt;
&lt;p&gt;$$
x² - y² = (x-y)(x+y)
$$&lt;/p&gt;
&lt;p&gt;But the &lt;strong&gt;sum of squares&lt;/strong&gt; x² + y² cannot be factorized if without considering imaginary unit i.&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
x² + y² &amp;amp; = x² - (-y²) \\
&amp;amp; = x² - (- 1 y²) \\
&amp;amp; = x² - (i² y²) \\
&amp;amp; = x² - (iy)² \\
&amp;amp; = (x-iy) (x+iy)
\end{aligned}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;modulus-of-complex-value&#34;&gt;Modulus of complex value&lt;/h2&gt;
&lt;p&gt;Source page &lt;a class=&#34;link&#34; href=&#34;https://www.khanacademy.org/math/precalculus/x9e81a4f98389efdf:complex/x9e81a4f98389efdf:complex-abs-angle/v/absolute-value-of-a-complex-number&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lesson 5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The absolute value (modulus) of a number is the distance away from zero.&lt;/p&gt;
&lt;p&gt;A complex number $3-4i$ plotted on the complex plane:&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 136 153&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 24,48 L 96,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,112 L 56,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,16 L 24,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,48 L 24,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,112 L 24,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,48 L 56,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;32.000000,16.000000 20.000000,10.400000 20.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 24.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;104.000000,48.000000 92.000000,42.400002 92.000000,53.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 96.000000, 48.000000)&#39;&gt;&lt;/polygon&gt;
&lt;circle cx=&#39;56&#39; cy=&#39;112&#39; r=&#39;6&#39; stroke=&#39;currentColor&#39; fill=&#39;currentColor&#39;&gt;&lt;/circle&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;I&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;132&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;|&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;i&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;|&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;R&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;The absolute value of 3-4i is the hypotenuse of the right triangle.&lt;/p&gt;
&lt;p&gt;Based on the Pythagorean theorem, |3-4i|= √(3²+4²) = 5.
(Because distance is positive, so only take the positive square root).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;polar--rectangular-forms&#34;&gt;polar &amp;amp; rectangular forms&lt;/h2&gt;
&lt;p&gt;Source page: &lt;a class=&#34;link&#34; href=&#34;https://www.khanacademy.org/math/precalculus/x9e81a4f98389efdf:complex/x9e81a4f98389efdf:complex-abs-angle/v/basic-complex-analysis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lesson 5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A complex number can be represented in two forms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read number + imaginary number: a + bi&lt;/li&gt;
&lt;li&gt;Exponential form&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of them have the same diagram, and just are described in different coordinates:&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 136 153&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 16,112 L 56,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,112 L 96,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,40 L 40,40&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,16 L 16,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,112 L 16,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,48 L 56,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,112 L 48,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;24.000000,16.000000 12.000000,10.400000 12.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 16.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;60.000000,48.000000 48.000000,42.400002 48.000000,53.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(300.000000, 48.000000, 48.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;104.000000,112.000000 92.000000,106.400002 92.000000,117.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 96.000000, 112.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;0&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;b&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;I&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;r&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;φ&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;132&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;z&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;R&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;The two arguments of complex number z can be (r, φ) or (a,b)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Magnitude: r = |z| = √(a²+b²)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Argument (Polar angle): φ = arctan(b/a)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a = r⋅cosφ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b = r⋅sinφ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;z = a+bi = r⋅cosφ + r⋅sinφi = r(cosφ + sinφ i) = $r e^{iφ}$&lt;/p&gt;
&lt;p&gt;where $cosφ + sinφ i = e^{iφ}$ can be derived by using Taylor series.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;multiplying-complex-number&#34;&gt;Multiplying complex number&lt;/h2&gt;
&lt;p&gt;Source page &lt;a class=&#34;link&#34; href=&#34;https://www.khanacademy.org/math/precalculus/x9e81a4f98389efdf:complex/x9e81a4f98389efdf:complex-mul/v/multiply-complex-graphically-3i&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lesson 7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given z,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;3z has the same direction as z, but three times it&amp;rsquo;s magnitude;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-3z is in the opposite direction, and has three times modulus of z&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-3iz = $1e^{iπ} ⋅ 3e^{i⋅π/2} ⋅ re^{iφ} = 3r e^{i(π+π/2+φ)}$ which turns into the opposite direction then rotates another 90 degrees in counter-clock wise.&lt;/p&gt;
&lt;p&gt;Or this can be derived from the loop of 1 -&amp;gt; i -&amp;gt; -1 -&amp;gt; -i with multiplying i each time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;z⋅(-1-i) : the angle and modulus of $-1-i$ take effect on z separately.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The angle of -1-i is 225 degrees (observed from the complex plane), so it will rotate the z by 225 degrees.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The magnitude of -1-i is √2, so z will be scaled by √2.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(I think it as a vector addition: z⋅(-1-i) = -z-zi,, but there&amp;rsquo;re too many steps).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;operations-in-polar-form&#34;&gt;Operations in polar form&lt;/h2&gt;
&lt;p&gt;Source page: &lt;a class=&#34;link&#34; href=&#34;https://www.youtube-nocookie.com/embed/VkdXztTFsvM/?controls=1&amp;amp;enablejsapi=1&amp;amp;modestbranding=1&amp;amp;showinfo=0&amp;amp;origin=https%3A%2F%2Fwww.khanacademy.org&amp;amp;iv_load_policy=3&amp;amp;html5=1&amp;amp;fs=1&amp;amp;rel=0&amp;amp;hl=en&amp;amp;cc_lang_pref=en&amp;amp;cc_load_policy=0&amp;amp;start=6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lesson 8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;multiplication&#34;&gt;Multiplication&lt;/h3&gt;
&lt;p&gt;Given:
$$
w₁ = 3(cos(330°) + i sin(330°)) \\
w₂ = 2(cos(120°) + i sin(120°))
$$&lt;/p&gt;
&lt;p&gt;What is w₁⋅w₂ ?&lt;/p&gt;
&lt;p&gt;$3 e^{i⋅330°} ⋅ 2 e^{i⋅120°} = 6 e^{i(450°)}$&lt;/p&gt;
&lt;p&gt;w₁⋅w₂ can be viewed as w₁ transforming w₂, i.e., w₂ is transformed by multiplying w₁&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The modulus of w₂ is scaled by the modulus of w₁ (2),
so |w₁⋅w₂| = 3⋅2 = 6;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The argument (angle) of w₁ is rotated by the argument of w₁ (330°),
so arg(w₁⋅w₂) = 120° + 330° = 450° = 90°&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So w₁⋅w₂ = 6 (cos(90°) + i sin(90°)) = 6i&lt;/p&gt;
&lt;h3 id=&#34;division&#34;&gt;Division&lt;/h3&gt;
&lt;p&gt;$$
w₁ = 8(cos( \frac{4π}{3} ) + i sin( \frac{4π}{3} )) \\
w₂ = 2(cos( \frac{7π}{6} ) + i sin( \frac{7π}{6} )) \\
$$&lt;/p&gt;
&lt;p&gt;What is $\frac{w₁}{w₂}$ ?&lt;/p&gt;
&lt;p&gt;$8e^{ i\frac{4π}{3} } / (2e^{ i\frac{7π}{6} }) = 4 e^{i(π/6)}$&lt;/p&gt;
&lt;p&gt;Another way to think about it is that w₁ is transformed by w₂:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;the modulus of w₁ is &lt;strong&gt;divided&lt;/strong&gt; by the modulus of w₂;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the argument of w₁ is rotated &lt;strong&gt;clock-wise&lt;/strong&gt; by the argument of w₂.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;modulus&lt;/th&gt;
&lt;th&gt;argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;|w₁|=8&lt;/td&gt;
&lt;td&gt;arg(w₁)=4π/3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|w₂|=2&lt;/td&gt;
&lt;td&gt;arg(w₂)=7π/6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|w₁/w₂|=4&lt;/td&gt;
&lt;td&gt;arg(w₁/w₂) = 4π/3 - 7π/6 = π/6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So $\frac{w₁}{w₂} = 4(cos(π/6) + i sin(π/6)) = 4(√3/2 + i/2)$&lt;/p&gt;
&lt;h3 id=&#34;powers-of-complex-number&#34;&gt;Powers of complex number&lt;/h3&gt;
&lt;p&gt;Consider the complex number $z = -1 + i \sqrt 3$.
Find $z^4$ in polar and rectangular form.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modulus of z is 2, so its modulus is times itself four times: 2⁴ = 16&lt;/li&gt;
&lt;li&gt;Argument of z is φ = $\rm arctan(\sqrt 3)$=60°=120°, so its angle rotate by 4 times of its argument: φx4 = 480° = 120°&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The polar form is $z⁴ = 16 (cos(120°) + i sin(120°))$,
so the rectangular form is $z⁴ = 16(1/2 + i √3/2) = 8 + i8√3 $&lt;/p&gt;
&lt;h3 id=&#34;complex-number-equations&#34;&gt;Complex number equations&lt;/h3&gt;
&lt;p&gt;Given equation x³=1, find all of the real and/or complex roots of this equation.&lt;/p&gt;
&lt;p&gt;For a real number: $z= 1 = 1 + 0i = 1e^{i0°}$,
its argument arg(z) can be 0, 2π, 4π, &amp;hellip;,
i.e., $1 = e^{i0} = e^{i2π} = e^{i4π} = e^{i6π}$ &amp;hellip;&lt;/p&gt;
&lt;p&gt;Plug these exponential form into x³=1:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;x³=1&lt;/th&gt;
&lt;th&gt;x³=$e^{i2π}$&lt;/th&gt;
&lt;th&gt;x³=$e^{i4π}$&lt;/th&gt;
&lt;th&gt;x³=$e^{i6π}$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cube root&lt;/td&gt;
&lt;td&gt;x=1&lt;/td&gt;
&lt;td&gt;x=$e^{i2π/3}$&lt;/td&gt;
&lt;td&gt;x=$e^{i4π/3}$&lt;/td&gt;
&lt;td&gt;x=$e^{i6π/3}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modulus&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;angle&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2π/3 = 120°&lt;/td&gt;
&lt;td&gt;4π/3 = 240°&lt;/td&gt;
&lt;td&gt;2π&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;root&lt;/td&gt;
&lt;td&gt;x₁&lt;/td&gt;
&lt;td&gt;x₂&lt;/td&gt;
&lt;td&gt;x₃&lt;/td&gt;
&lt;td&gt;redundant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a+bi&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-1/2 + i√3/2&lt;/td&gt;
&lt;td&gt;-1/2 - i√3/2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 240 185&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 24,96 L 104,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 104,96 L 160,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 160,96 L 200,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 104,16 L 104,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 104,96 L 104,160&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,144 L 104,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,48 L 104,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;92.000000,48.000000 80.000000,42.400002 80.000000,53.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(240.000000, 80.000000, 48.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;92.000000,144.000000 80.000000,138.399994 80.000000,149.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(120.000000, 80.000000, 144.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;112.000000,16.000000 100.000000,10.400000 100.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 104.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;168.000000,96.000000 156.000000,90.400002 156.000000,101.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 160.000000, 96.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;208.000000,96.000000 196.000000,90.400002 196.000000,101.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 200.000000, 96.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;x&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;x&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;₂&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;₃&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;I&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;160&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;x&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;160&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;168&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;₁&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;R&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fundamental-theorem-of-algebra&#34;&gt;Fundamental theorem of Algebra&lt;/h2&gt;
&lt;p&gt;Source page: &lt;a class=&#34;link&#34; href=&#34;https://www.khanacademy.org/math/precalculus/x9e81a4f98389efdf:complex/x9e81a4f98389efdf:fta/v/fundamental-theorem-of-algebra-intro&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lesson 9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Fundamental theorem of Algebra:
a n-th degree polynomial has n roots.&lt;/p&gt;
&lt;p&gt;$P(x) = ax^n + bx^{n-1} + &amp;hellip; + K$&lt;/p&gt;
</description>
        </item>
        <item>
        <title>watch: FT - 李永乐 | Fourier Transform</title>
        <link>https://zichen34.github.io/writenotes/calc/d-vid-ft-%E6%9D%8E%E6%B0%B8%E4%B9%90/</link>
        <pubDate>Tue, 20 Jun 2023 15:30:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/d-vid-ft-%E6%9D%8E%E6%B0%B8%E4%B9%90/</guid>
        <description>&lt;p&gt;Source video: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/0LuyxzqI3Hk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;傅立叶变换如何理解？美颜和变声都是什么原理？李永乐老师告诉你&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;变换&#34;&gt;变换&lt;/h2&gt;
&lt;p&gt;向量可以从图形“变换”成数，也可以从数“逆变换”回图形&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 280 137&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 16,64 L 48,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,64 L 112,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,64 L 176,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,16 L 16,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,64 L 16,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,64 L 40,16&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,80 L 64,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,64 L 32,96&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,32 L 64,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;24.000000,16.000000 12.000000,10.400000 12.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(270.000000, 16.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;44.000000,96.000000 32.000000,90.400002 32.000000,101.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(60.000000, 32.000000, 96.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;52.000000,16.000000 40.000000,10.400000 40.000000,21.600000&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(300.000000, 40.000000, 16.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;120.000000,64.000000 108.000000,58.400002 108.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 112.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;184.000000,64.000000 172.000000,58.400002 172.000000,69.599998&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(0.000000, 176.000000, 64.000000)&#39;&gt;&lt;/polygon&gt;
&lt;circle cx=&#39;64&#39; cy=&#39;48&#39; r=&#39;6&#39; stroke=&#39;currentColor&#39; fill=&#39;#fff&#39;&gt;&lt;/circle&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;y&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;B&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;A&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;C&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;20&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;116&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;x&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;变&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;160&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;换&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;192&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;=&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;A&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;B&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;C&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;224&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;232&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;240&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;248&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;248&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;-&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;256&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;256&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;256&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;264&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;264&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;向量的图像与数组是一一对应的。向量相加对应数组相加。&lt;/p&gt;
&lt;p&gt;向量 A 被表示为 (2,4)，其含义为 A 在 x 方向上有 2 个单位长度 ex，在 y 方向上有 4 个单位长度 ey。&lt;/p&gt;
&lt;p&gt;因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;𝒆x 和 𝒆y 的长度（自己与自己的内积）都等于 1 ：
𝒆x⋅ex = ey⋅ey = 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex 与 ey 正交（垂直），两者内积等于 0：
ex ⋅ ey = |ex|⋅|ey|⋅cos90° = 0&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以 ex 和 ey 是一组标准正交基。
空间中的任何一个向量都可以变成标准正交基的组合。&lt;/p&gt;
&lt;h2 id=&#34;傅里叶级数&#34;&gt;傅里叶级数&lt;/h2&gt;
&lt;p&gt;任何一个周期性的函数 f(t) 都可以变换为一系列正余弦函数的和。
正弦余弦函数就是一组正交基。&lt;/p&gt;
&lt;p&gt;它的逆变换是显而易见的，因为 sin 和 cos 都是周期性的，它们组合出来的函数也一定是周期性的。&lt;/p&gt;
&lt;p&gt;对于一个周期性函数，按照不同频率 w 分解出不同的正余弦函数（波）：&lt;/p&gt;





  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/%E6%9D%8E%E6%B0%B8%E4%B9%90_Fourier_7-25.png width=&gt;
  
  


&lt;p&gt;如上图，在频率方向上，一个周期性波可以分解成一个频率为 w 的正弦函数，与一个频率为 2w 的分量（振幅比较大），再与一个频率为 3w 的分量（振幅比较小）相加。&lt;/p&gt;
&lt;p&gt;从后方观察，以时间为坐标系，只能看到信号随时间的变化；
从侧面观察，以频率为坐标系，一个信号是多个信号的累加。&lt;/p&gt;
&lt;p&gt;因为分量是有限个，所以频谱图上是一条条竖线，不同的高度代表振幅的大小。
不同频率的分量，除了振幅不同，起始点也不同，所以还需要一个轴表示相位：&lt;/p&gt;





  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/%E6%9D%8E%E6%B0%B8%E4%B9%90_Fourier_8-4.png width=&gt;
  
  


&lt;p&gt;时域里的信号 f 变换到频域里的三个维度：频率 w，振幅 F(f)，相位 φ。&lt;/p&gt;
&lt;p&gt;如果已知频域中的 w, F(f), φ，就可以把它们组合起来，逆变换到时域中的信号。&lt;/p&gt;
&lt;p&gt;$$
f(t) = \frac{a_0}{2} + \sum_i a_n sin(n w t + φ_n) \\
\quad = \frac{a_0}{2} + \sum_i a_n sin(n w t) + \sum_i b_n cos(n w t)
$$&lt;/p&gt;
&lt;p&gt;n 是整数，nw 是不同的频率，aₙ 是振幅，φₙ 是相位。
按照第2行的写法，标准正交基有 3 个：1， sin(nwt), cos(nwt)&lt;/p&gt;
&lt;p&gt;任何一个&lt;strong&gt;周期性&lt;/strong&gt;的函数都可以分解成以上 3 个标准正交基的线性组合。
（sin(nwt) 与 cos(nwt) 是一对，拆不开？）&lt;/p&gt;
&lt;h2 id=&#34;连续傅里叶变换&#34;&gt;连续傅里叶变换&lt;/h2&gt;
&lt;p&gt;非周期信号可以看作是周期无穷大的周期性信号。&lt;/p&gt;
&lt;h3 id=&#34;欧拉公式&#34;&gt;欧拉公式&lt;/h3&gt;
&lt;p&gt;用一个平面坐标系表示虚数，则横轴表示实部，纵轴表示虚部。
横轴的单位为1，纵轴的单位为虚数单位 i，则单位圆上任何一点 A 可以表示为：
cosθ + i⋅sinθ。&lt;/p&gt;





  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/%E6%9D%8E%E6%B0%B8%E4%B9%90_Fourier_13-51.png width=&gt;
  
  


&lt;p&gt;令 θ = wt，w 取不同的频率，对应 A 点在圆上逆时针转动不同的角度&lt;/p&gt;
&lt;p&gt;根据欧拉公式：&lt;/p&gt;
&lt;p&gt;$$
cosθ + i⋅sinθ = e^{iθ} \\
cos(wt) + i⋅sin(wt) = e^{iwt}
$$&lt;/p&gt;
&lt;p&gt;所以 A 在逆时针旋转时，每时每刻都代表了两个正交基 cosθ, sinθ。
如果是 $e^{-iwt}$ 就是顺时针旋转。&lt;/p&gt;
&lt;h3 id=&#34;ft-用正交基摘分量&#34;&gt;FT: 用正交基&amp;quot;摘&amp;quot;分量&lt;/h3&gt;
&lt;p&gt;一个非周期性的时域信号肯定也包含各种频率的信号分量，
又因为标准正交基与自己的内积为 1，与其他正交基的内积为 0，
所以可以用各个正交基与该信号内积，则留下的就只是在这个基向量上的分量。&lt;/p&gt;
&lt;p&gt;非周期性时域信号的频率分量有无穷个，所以傅里叶变换是用积分：&lt;/p&gt;
&lt;p&gt;$$
\^F_T(w) = ∫_{-∞}^{+∞} f(t) e^{-jwt} dt  \\
\ \\
f(t) e^{-jwt}
\begin{cases}
=0 &amp;amp; \text{f(t) 不含 sin(wt),cos(wt)} \\
\neq 0 &amp;amp; \text{f(t) 含有 sin(wt),cos(wt)}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;其中 $e^{-jwt}$ 是一组正交基 sin(wt) 和 cos(wt)。&lt;/p&gt;
&lt;p&gt;$\^F_T(w)$ 是个复数（带 i），实部表示振幅，虚部是相位，而且是连续的
，意味着每个频率的正（余）弦函数都有分量，&lt;/p&gt;





  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/%E6%9D%8E%E6%B0%B8%E4%B9%90%E8%80%81%E5%B8%88_Fourier_15-17.png width=&gt;
  
  


&lt;h3 id=&#34;ift-正交基加权和&#34;&gt;IFT: 正交基加权和&lt;/h3&gt;
&lt;p&gt;$F_T(w)$ 是各正交基（正弦余弦函数）的”系数“，即在各正交基上的”长度“。&lt;/p&gt;
&lt;p&gt;从频域信号逆变换回时域信号，就把系数乘到基向量上，再加起来：&lt;/p&gt;
&lt;p&gt;$$
f(t) = ∫_{-∞}^{+∞} F_T(w) e^{-jwt} dw
$$&lt;/p&gt;
&lt;h2 id=&#34;应用&#34;&gt;应用&lt;/h2&gt;
&lt;p&gt;声音信号是时域，横坐标是时间；图像信号是空间域，横坐标是空间位置&lt;/p&gt;
&lt;p&gt;低频分量是图像的轮廓，高频分量是细节&lt;/p&gt;
</description>
        </item>
        <item>
        <title>memo: Calc | Gaussian</title>
        <link>https://zichen34.github.io/writenotes/calc/gaussian/</link>
        <pubDate>Sat, 17 Jun 2023 22:14:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/gaussian/</guid>
        <description>&lt;p&gt;(2023-11-22)&lt;/p&gt;
&lt;h2 id=&#34;discrete-convolve&#34;&gt;Discrete Convolve&lt;/h2&gt;
&lt;p&gt;Source video: &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Vd4y1e7pj/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【官方双语】那么……什么是卷积？- 3B1B&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Two list of numbers are combined and form a &lt;strong&gt;new list&lt;/strong&gt;:
Make a table, calculate pairwise product for each cell and &lt;strong&gt;sum up&lt;/strong&gt; all anti-diagonals.&lt;/p&gt;
&lt;p&gt;$(a * b)_n = ∑_{\substack{i,j \\ i+j=n}} a_i * b_j$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;sum of indecies&lt;/strong&gt; of the 2 number in each pair to be summed up is the same, just distinct combinations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reverse the second list, slide it from left to righ, and sum the products of each pair aligned vertically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convolution for image is for smoothing by averaging nearby pixels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The multiplication of two polynomials is convolution, because multiply each two term and collect term with the same order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2024-01-12) 父亲寿命 和 儿子的年龄做卷积，等于一起生活的岁月&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Yk4y1K7Az&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【官方双语】卷积的两种可视化|概率论中的X+Y既美妙又复杂 - 3B1B&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1gh4y1W7ag/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【官方双语】但是什么是中心极限定理？- 3B1B&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1wu411W7uU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【官方双语】为什么正态分布里会有一个π？（不止是积分技巧）- 3B1B&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;(2023-11-07)&lt;/p&gt;
&lt;h2 id=&#34;covariance-matrix-is-psd&#34;&gt;Covariance Matrix is PSD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variance is the average of the &lt;strong&gt;squared distance&lt;/strong&gt; between the mean and point for a single dimension.&lt;/p&gt;
&lt;p&gt;方差是偏离期望的平方的期望。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Variance is a scalar: the averaged squared &lt;strong&gt;mangitude of the distance vector&lt;/strong&gt; between a certain vector and the mean vector in a data space.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;$$Var(x) = \frac{∑(x-μ)²}{n}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Covariance is the &lt;strong&gt;product of 2 distances&lt;/strong&gt; betwee mean and point for the 2 dimensions respectively.&lt;/p&gt;
&lt;p&gt;$$Covar(x,y) = \frac{∑(x-μ_x)(y-μ_y)}{n}$$&lt;/p&gt;
&lt;p&gt;Covariance is a real number and indicates positive- or negtive correlation of 2 dimensions by its &lt;strong&gt;sign&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Covariance matrix is a symmatric matrix recording covariance for each &lt;strong&gt;pair of dimensions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;$$
\begin{array}{c|ccc}
𝐱 &amp;amp; d₁ &amp;amp; d₂ &amp;amp; d₃ \\
\hline  \\
d₁ &amp;amp; \frac{∑(x_{d₁}-μ_{d₁})(x_{d₁}-μ_{d₁})}{n}
&amp;amp; \frac{∑(x_{d₁}-μ_{d₁})(x_{d₂}-μ_{d₂})}{n}
&amp;amp; \frac{∑(x_{d₁}-μ_{d₁})(x_{d₃}-μ_{d₃})}{n}  \\ \\
d₂ &amp;amp; \frac{∑(x_{d₂}-μ_{d₂})(x_{d₁}-μ_{d₁})}{n}
&amp;amp; \frac{∑(x_{d₂}-μ_{d₂})(x_{d₂}-μ_{d₂})}{n}
&amp;amp; \frac{∑(x_{d₂}-μ_{d₂})(x_{d₃}-μ_{d₃})}{n}  \\ \\
d₃ &amp;amp; \frac{∑(x_{d₃}-μ_{d₃})(x_{d₁}-μ_{d₁})}{n}
&amp;amp; \frac{∑(x_{d₃}-μ_{d₃})(x_{d₂}-μ_{d₂})}{n}
&amp;amp; \frac{∑(x_{d₃}-μ_{d₃})(x_{d₃}-μ_{d₃})}{n}
\end{array}
$$&lt;/p&gt;
&lt;p&gt;Thus, element on the main diagonal is the variance of each variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Covariance matrix is &lt;strong&gt;always positive semi-definite&lt;/strong&gt;, symmetric, square.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The eigenvalues λ and eigenvectors 𝐯 of covariance matrix 𝐄(𝐱𝐱ᵀ) can be solved from:&lt;/p&gt;
&lt;p&gt;𝐄(𝐱𝐱ᵀ) ⋅ 𝐯 = λ𝐯&lt;/p&gt;
&lt;p&gt;Since 𝐄(𝐱𝐱ᵀ) is a symmetric matrix, λs are all real numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;λ = 𝐄(𝐱𝐱ᵀ) = $\frac{∑(xᵢ-μᵢ)²}{n}$ ≥ 0,&lt;/p&gt;
&lt;p&gt;where n is the number of datapoints in the dataset. xᵢ is one of dimensions of 𝐱.
xᵢ is a column vector containing n points.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the definition of positive semi-definite:&lt;/p&gt;
&lt;p&gt;𝐯ᵀ𝐄 𝐯 = λ𝐯ᵀ𝐯 = λ[a b c] $[^a_{^b_c}]$ = λ(a²+b²+c²) ≥ 0.&lt;/p&gt;
&lt;p&gt;Thus, covariance matrix 𝐄 is positive semi-definite.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;todo: This could be wrong, need to watch Dr. Strang&amp;rsquo;s lecture.&lt;/p&gt;
&lt;p&gt;The following proof is from &lt;a class=&#34;link&#34; href=&#34;https://stats.stackexchange.com/a/53105/365483&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Is a sample covariance matrix always symmetric and positive definite? - SE&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Covariance matrix E(𝐱𝐱ᵀ) = (𝐱-𝛍)(𝐱-𝛍)ᵀ/n&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the definition of positive semi-definite:&lt;/p&gt;
&lt;p&gt;𝐯ᵀ E(𝐱𝐱ᵀ) 𝐯 = $\frac{1}{n}$ 𝐯ᵀ (𝐱-𝛍)(𝐱-𝛍)ᵀ 𝐯 = ((𝐱-𝛍)ᵀ 𝐯)²/n ≥ 0. A positive scalar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other Proofs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://statproofbook.github.io/P/covmat-psd.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Proof: Positive semi-definiteness of the covariance matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since covariance matrix is positive semi-definite, there is global minima for all axis:&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://gowrishankar.info/blog/why-covariance-matrix-should-be-positive-semi-definite-tests-using-breast-cancer-dataset/&#34;&gt;&lt;img src=&#34;https://gowrishankar.info/blog/why-covariance-matrix-should-be-positive-semi-definite-tests-using-breast-cancer-dataset/output_16_0.png&#34;
           alt=&#34;Heatmap of a covariance matrix - Gowri Shankar&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;
              &lt;p&gt;Heatmap of a covariance matrix - Gowri Shankar&lt;/p&gt;
          &lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;figure&gt;&lt;a href=&#34;https://ximera.osu.edu/mklynn2/multivariable/content/04_2_quadratic_forms/quadratic_forms&#34;&gt;&lt;img src=&#34;https://gowrishankar.info/blog/why-covariance-matrix-should-be-positive-semi-definite-tests-using-breast-cancer-dataset/output_5_0.png&#34;
           alt=&#34;Categorizing Quadratic Forms - Ximera, OSU - Categorizing Quadratic Forms&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;
              &lt;p&gt;Categorizing Quadratic Forms - Ximera, OSU - Categorizing Quadratic Forms&lt;/p&gt;
          &lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;(2023-11-08)&lt;/p&gt;
&lt;h2 id=&#34;radius-of-3d-gaussian&#34;&gt;Radius of 3D Gaussian&lt;/h2&gt;
&lt;p&gt;If a dataset scattered as an ellipse following 2D Gaussian &lt;strong&gt;is circumscribed by a circle&lt;/strong&gt;, to cover the most points,
the radius of the circle could be $r = 3σ$, 3 times the standard deviation.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_deviation&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/MultivariateNormal.png/330px-MultivariateNormal.png&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;The standard deviation σ is the square root of the variance, which is the element on the main diagonal of the covariance matrix.&lt;/p&gt;
&lt;p&gt;And variances are the eigenvalues of the covariance matrix.&lt;/p&gt;
&lt;p&gt;Given a covariance matrix $𝐂=[^{a \ b}_{b \ c}]$, its eigenvalue λ and eigenvector 𝐯 satisfy: 𝐂 𝐯 = λ𝐯.&lt;/p&gt;
&lt;p&gt;Eigenvalues λs can be solved from: $\rm det(𝐂 - λ𝐈) = 0$:&lt;/p&gt;
&lt;p&gt;$$
\begin{vmatrix} a-λ &amp;amp; b \\ b &amp;amp; c-λ\end{vmatrix} = 0  \\
(a-λ)(c-λ) - b^2 = 0  \\
λ^2 - (a+c)λ + ac-b^2 =0
$$&lt;/p&gt;
&lt;p&gt;λ₁ = $\frac{(a+c) + \sqrt{(a+c)^2 - 4(ac-b^2)} }{2}$,
λ₂ = $\frac{(a+c) - \sqrt{(a+c)^2 - 4(ac-b^2)} }{2}$&lt;/p&gt;
</description>
        </item>
        <item>
        <title>memo: Calc | Nonlinear Least Squares</title>
        <link>https://zichen34.github.io/writenotes/calc/nonlinear_least_squares/</link>
        <pubDate>Fri, 26 May 2023 13:58:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/nonlinear_least_squares/</guid>
        <description>&lt;img src="https://img.youtube.com/vi/Vnga_psnCAo/maxresdefault.jpg" alt="Featured image of post memo: Calc | Nonlinear Least Squares" /&gt;&lt;h2 id=&#34;jacobian-matrix&#34;&gt;Jacobian matrix&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.khanacademy.org/math/multivariable-calculus/multivariable-derivatives/jacobian/v/jacobian-prerequisite-knowledge&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Khan Academy&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h3&gt;
&lt;p&gt;Matrix is a &lt;strong&gt;linear transformation&lt;/strong&gt; of space by moving the basis vectors to new landing spot.&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix} 2 &amp;amp; -3 \\ 1 &amp;amp; 1 \end{bmatrix}
\begin{bmatrix} x \\ y \end{bmatrix} \rightarrow
\begin{bmatrix} 2x + (-3)y \\ 1x+1y \end{bmatrix}
$$&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;




  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/linear_transform_1.png width=&gt;
  
  

&lt;/td&gt;
&lt;td&gt;




  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/linear_transform_2.png width=&gt;
  
  

&lt;/td&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;linear&amp;rdquo;: grid lines remain parallel, evenly spaced and straight lines after transformation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;p&gt;The two basis vectors $[^1_0]$ and $[^0_1]$ &lt;strong&gt;are moved&lt;/strong&gt; to $[^2_1]$ and $[^{-3}_{1}]$,
which are the columns of the matrix.&lt;/p&gt;
&lt;p&gt;$$
\begin{array}{ccc}
\begin{bmatrix} 2 &amp;amp; -3 \\ 1 &amp;amp; 1 \end{bmatrix}
\begin{bmatrix} 1 \\ 0 \end{bmatrix} =
\begin{bmatrix} 2+0 \\ 1+0 \end{bmatrix}
\\ \\
\begin{bmatrix} 2 &amp;amp; -3 \\ 1 &amp;amp; 1 \end{bmatrix}
\begin{bmatrix} 0 \\ 1 \end{bmatrix} =
\begin{bmatrix} 0-3 \\ 0+1 \end{bmatrix}
\end{array}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reconstruct&lt;/p&gt;
&lt;p&gt;The basis vectors $𝐢 = [i₁,i₂], 𝐣 = [j₁,j₂]$ of the new space &lt;strong&gt;are completely made up&lt;/strong&gt; by original basis vectors $[^1_0]$ and $[^0_1]$:&lt;/p&gt;
&lt;p&gt;$$
\begin{array}{ccc}
𝐢 = \begin{bmatrix} i_1 \\ i_2 \end{bmatrix} =
\begin{bmatrix} 2×1 + (-3)×0 \\ 1×1 + 1×0 \end{bmatrix}
\begin{matrix} \text{first component}\\ \text{second component}\end{matrix}
\\ \\
𝐣 = \begin{bmatrix} j_1 \\ j_2 \end{bmatrix} =
\begin{bmatrix} 2×0 + (-3)×1 \\ 1×0 + 1×1 \end{bmatrix}
\begin{matrix} \text{first component}\\ \text{second component}\end{matrix}
\end{array}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Record&lt;/p&gt;
&lt;p&gt;Matrix records synthesising factor for transforming each original basis vector to the new basis vector:&lt;/p&gt;
&lt;p&gt;The first row of the matrix is the combination factors for the original first basis vector to form the first component of the new first basis vector.&lt;br&gt;
The second row corresponds to the second component of the new first basis vector, by re-combining the original first basis vector. And so forth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Liner Operator&lt;/p&gt;
&lt;p&gt;Matrix operator 𝑳 takes in a vector and spit out a vector.&lt;/p&gt;
&lt;p&gt;Based on the properties of linearity: scaling and adding, i.e.,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L(a𝐯) = aL(𝐯)&lt;/li&gt;
&lt;li&gt;L(𝐯+𝐰) = L(𝐯) + L(𝐰)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Applying the operator on a vector $[^x_y]$ can be represented as:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
L(\begin{bmatrix} x \\ y \end{bmatrix}) &amp;amp;=
L(x \begin{bmatrix} 1\\ 0 \end{bmatrix} + y \begin{bmatrix} 0 \\ 1 \end{bmatrix}) \\
&amp;amp;= x L(\begin{bmatrix} 1 \\ 0\end{bmatrix}) + y L(\begin{bmatrix} 0 \\ 1 \end{bmatrix})
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Let $[^x_y]$ equals to $[^2_1]$, the result vector should be 2 times of $L([^1_0])$ plus 3 times of $L([^0_1])$, i.e., $[^1_3]$&lt;/p&gt;
&lt;p&gt;That means matrix transforms the space by modifying the original basis vectors.
The coordinates of the given vector have no change either in the original space or the new space.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the transformation can be found by determining the coefficient of the change of each component.&lt;/p&gt;
&lt;p&gt;The first column in the transformation matrix is landing spot of the first basis vector (i.e., x axis)&lt;/p&gt;
&lt;h3 id=&#34;local-linearity&#34;&gt;local linearity&lt;/h3&gt;
&lt;p&gt;Nonlinear function $f([^x_y]) = \rm [^{x+sin(y)}_{y+sin(x)}]$ has local linearity.
Therefore, the local linear transformation can be represented by a 2x2 matrix&lt;/p&gt;
&lt;h3 id=&#34;jacobian-matrix-1&#34;&gt;Jacobian matrix&lt;/h3&gt;
&lt;p&gt;There are multiple functions and multiple variables.
Jacobian records the effects of each variable on each function.
Its organization comes down to local linearity, which allows the nonlinear transformation to be represented as a linear transformation.&lt;/p&gt;
&lt;h3 id=&#34;jacobian-determinant&#34;&gt;Jacobian determinant&lt;/h3&gt;
&lt;p&gt;Jacobian determinant is the factor of the neighbor area around a point scratched or squished by the local &amp;ldquo;linear transformation&amp;rdquo;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;todo: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/wCZ1VEmVjVo?si=UlPZMu8bFRg7MMYv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is Jacobian? | The right way of thinking derivatives and integrals - Mathemaniac&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gauss-newton-algorithm&#34;&gt;Gauss-Newton algorithm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1zE41177WB/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最优化算法之高斯牛顿法-path-int&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用雅克比矩阵的乘积 J(𝐱) J(𝐱)ᵀ 代替 Hessian 矩阵&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1MP411g7to/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;-拼凑梦想-&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初值会影响能否走到全局最优&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视觉slam 十四讲第6章&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/CjrRFbQwKLA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Gauss-Newton algorithm for solving non linear least squares explained&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1NJ411r7ja/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;（干货）《雅可比矩阵是什么东西》3Blue1Brown，搬自可汗学院。 【自制中文字幕】&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2023-12-24) &amp;ldquo;In [8], an LSTM [18] is used to model the Levenberg-Marquardt (LM) algorithm
and predicts the update at each step directly.&amp;rdquo;
mentioned in Fast-MVSNet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;levenberg-marquadt&#34;&gt;Levenberg Marquadt&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/wangqy3811457/article/details/123186754&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;code example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;paper &lt;a class=&#34;link&#34; href=&#34;http://www2.imm.dtu.dk/pubdb/edoc/imm3215.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;METHODS FOR NON-LINEAR LEAST SQUARES PROBLEMS&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>memo: Calc | Inverse Function of Activations</title>
        <link>https://zichen34.github.io/writenotes/calc/inverse_softmax/</link>
        <pubDate>Sun, 19 Feb 2023 11:00:00 -0500</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/inverse_softmax/</guid>
        <description>&lt;h2 id=&#34;inverse-of-sigmoid&#34;&gt;Inverse of Sigmoid&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inverse_sigmoid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;inverse-of-softmax&#34;&gt;Inverse of Softmax&lt;/h2&gt;
&lt;h3 id=&#34;determining-existence&#34;&gt;Determining Existence&lt;/h3&gt;
&lt;p&gt;Only monotonic function has its inverse function. &lt;a class=&#34;link&#34; href=&#34;#zhihu-%e5%86%af%e5%8d%9a%e5%a3%ab&#34; &gt;¹&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The softmax function is not invertible? &lt;a class=&#34;link&#34; href=&#34;#StackEx-lakshman&#34; &gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any constant C will work. Or C=(1−log(x⋅y⋅z))/3) &lt;a class=&#34;link&#34; href=&#34;#StackEx-jojek&#34; &gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Implement a layer to invert the softmax by tensorflow: &lt;a class=&#34;link&#34; href=&#34;#StackOv-Benjamin&#34; &gt;²&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inv_softmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inv_softmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;10.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;inv_softmax&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outputs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;softmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;ref&#34;&gt;Ref&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div id=&#34;zhihu-冯博士&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/226519921&#34;&gt;反函数的定义及求法 - 半个冯博士的文章 - 知乎; (Searched by DDG: &#34;求和函数的反函数&#34;)&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;StackOv-Benjamin&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/q/64663867/18003182&#34;&gt;How to create a layer to invert a softmax (TensforFlow,python)? - StackOverflow&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;StackEx-lakshman&#34;&gt;&lt;a href=&#34;https://stats.stackexchange.com/q/549499/365483&#34;&gt;Can we have an explicit representation of inverse of a softmax function? -StackExchange (searched by DDG: &#34;softmax function inverse&#34;)&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;StackEx--jojek&#34;&gt;&lt;a href=&#34;https://math.stackexchange.com/q/2786600&#34;&gt;Invert the softmax function - StackExchange&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stats.stackexchange.com/q/552375/365483&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is an intuitive interpretation for the softmax transformation?&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;zhihu-阳光&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/105722023&#34;&gt;一文详解Softmax函数 - 触摸壹缕阳光的文章 - 知乎 (searched by DDG: &#34;sotmax&#34;)&lt;/a&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;(2023-02-23)&lt;/p&gt;
&lt;h2 id=&#34;inverse-of-sum&#34;&gt;Inverse of Sum&lt;/h2&gt;
&lt;p&gt;Is the summation operation invertible?&lt;/p&gt;
&lt;p&gt;(DDG search: &amp;ldquo;inverse summation&amp;rdquo; or &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://duckduckgo.com/?q=invert&amp;#43;a&amp;#43;summation&amp;amp;ia=web&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;invert a summation&lt;/a&gt;&amp;rdquo;)&lt;/p&gt;
&lt;div id=&#34;&#34;&gt;&lt;/div&gt;
</description>
        </item>
        <item>
        <title>memo: Calc | Pseudo-Inverse</title>
        <link>https://zichen34.github.io/writenotes/calc/pseudo-inverse/</link>
        <pubDate>Sat, 04 Feb 2023 12:23:00 -0500</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/pseudo-inverse/</guid>
        <description>&lt;p&gt;Source video: &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1364y1678r/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深度学习-啃花书0103伪逆矩阵最小二乘 (2021-07-22) - 科研小灰灰&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;solve-linear-regression&#34;&gt;Solve linear regression&lt;/h2&gt;
&lt;p&gt;For a n-dimensional linear regression problem,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are N input samples: x₁,x₂,&amp;hellip;,$x_N$, where each sample is a n-dimension vector xᵢ∈ ℝⁿ&lt;/li&gt;
&lt;li&gt;Their corresponding target outputs are:  y₁,y₂,&amp;hellip;,$y_N$, where each output is a scalar yᵢ∈ ℝ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, these data can be represented as a linear system:&lt;/p&gt;
&lt;p&gt;$$
\begin{cases}
x₁₁a₁ + x₁₂a₂ + &amp;hellip; + x₁ₙaₙ = y₁ \\
x₂₁a₁ + x₂₂a₂ + &amp;hellip; + x₂ₙaₙ = y₁ \\
\vdots \\
x_{N1}a₁ + x_{N2}a₂ + &amp;hellip; + x_{Nn}aₙ = y_N \\
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;Further, this system can be represented with matrix and vector:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
x₁₁ &amp;amp; x₁₂ &amp;amp; … &amp;amp; x₁ₙ \\
x₁₁ &amp;amp; x₁₂ &amp;amp; … &amp;amp; x₁ₙ \\
⋮ &amp;amp; ⋮ &amp;amp; ⋱ &amp;amp; ⋮ \\
x_{N1} &amp;amp; x_{N2} &amp;amp; … &amp;amp; x_{Nn}
\end{bmatrix}
\begin{bmatrix}
a₁ \\ a₂ \\ ⋮ \\ aₙ
\end{bmatrix} =
\begin{bmatrix}
y₁ \\ y₂ \\ ⋮ \\ y_N
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;The objective of the linear regression is to solve the weights vector:
$[ ^{^{a₁}_{a₂}} _{^{\ ⁞}_{aₙ}} ]$
from the linear equation: $𝐗_{N×n} 𝐚_{n×1} = 𝐘_{N×1}$.&lt;/p&gt;
&lt;p&gt;If N=n (the coefficient matrix is a square matrix), and the data matrix $𝐗_{N×n}$ is a &lt;strong&gt;invertible matrix&lt;/strong&gt;,
then there will be 𝐚=𝐗⁻¹𝐘, such that the weights vector is determined directly.&lt;/p&gt;
&lt;p&gt;But in general, the number of samples N is not equal to the number of features n (N ≠ n), that is 𝐗 is not invertible and 𝐚 cannot be represented as 𝐗⁻¹𝐘.&lt;/p&gt;
&lt;h2 id=&#34;shift-from-𝐗-to-𝐗ᵀ𝐗&#34;&gt;Shift from 𝐗 to 𝐗ᵀ𝐗&lt;/h2&gt;
&lt;p&gt;Therefore, when the 𝐚 cannot be reached directly, the solution should be as close to the optimal as possible.&lt;/p&gt;
&lt;p&gt;That means the objective is to minimize the distance of two vectors:&lt;/p&gt;
&lt;p&gt;J=‖𝐗𝐚-𝐘‖² (without constraints)&lt;/p&gt;
&lt;p&gt;And the optimal solution is obtained when&lt;/p&gt;
&lt;p&gt;∂J/∂𝐚 = 𝐗ᵀ(𝐗𝐚-𝐘) = 0 ⇒ 𝐗ᵀ𝐗𝐚 = 𝐗ᵀ𝐘.&lt;/p&gt;
&lt;p&gt;Now, the previous 𝐗 is shifted to here 𝐗ᵀ𝐗 ∈ ℝⁿᕁⁿ, which is a &lt;strong&gt;square matrix&lt;/strong&gt;. And if 𝐗ᵀ𝐗 is invertible, then the optimal 𝐚 can be calculated in one-shot.&lt;/p&gt;
&lt;h2 id=&#34;is-𝐗ᵀ𝐗-invertible&#34;&gt;Is 𝐗ᵀ𝐗 invertible?&lt;/h2&gt;
&lt;p&gt;An invertible matrix has to satisfy 2 conditions:
it&amp;rsquo;s a square matrix and its rank equals to the number of variables n (#columns).&lt;/p&gt;
&lt;p&gt;According to this video, there are two cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If N &amp;gt; n, for example N=5, n=3, then (𝐗ᵀ𝐗)₃ₓ₃ is inverible generally. So&lt;/p&gt;
&lt;p&gt;𝐚=(𝐗ᵀ𝐗)⁻¹𝐗ᵀ𝐘,&lt;/p&gt;
&lt;p&gt;where the coefficient in front of 𝐘, (𝐗ᵀ𝐗)⁻¹𝐗ᵀ, is called the &lt;strong&gt;pseudo-inverse matrix&lt;/strong&gt;.
And 𝐚 = (𝐗ᵀ𝐗)⁻¹𝐗ᵀ𝐘 is called the least-square solution. (最小二乘解)&lt;/p&gt;
&lt;p&gt;(Because 𝐗 has no inverse matrix, so we find its &amp;ldquo;pseudo&amp;rdquo; inverse matrix. Or if 𝐗 is invertible, 𝐗⁻¹=(𝐗ᵀ𝐗)⁻¹𝐗ᵀ, they&amp;rsquo;re equivalent, but the latter suits more general scenarios.). &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If N &amp;lt; n, for example N=3, n=5, then (𝐗ᵀ𝐗)₅ₓ₅ is not invertible, because: &lt;br&gt;
rank(𝐗ᵀ𝐗) ≤ rank(𝐗₃ₓ₅) ≤ N=3 &amp;lt; n=5.&lt;/p&gt;
&lt;p&gt;In this case, 𝐚 cannot be calculated as (𝐗ᵀ𝐗)⁻¹𝐗ᵀ𝐘.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The problem can be understood that there are too many parameters (n is too high). When the parameters are much more than samples, there will be overfitting.
And one of the solutions is regularization.&lt;/p&gt;
&lt;h2 id=&#34;effect-of-the-regularization-term&#34;&gt;Effect of the regularization term&lt;/h2&gt;
&lt;p&gt;Since the reason why the optimal solution of the loss function J cannot be solved in one-shot is that the there are too many parameters,
a regularization is added to the loss funciton as follows:&lt;/p&gt;
&lt;p&gt;$$J = ‖𝐗𝐚-𝐘‖² + λ‖𝐚‖², λ&amp;gt;0$$&lt;/p&gt;
&lt;p&gt;Then the derivative becomes:&lt;/p&gt;
&lt;p&gt;∂J/∂𝐚 = 𝐗ᵀ𝐗𝐚 - 𝐗ᵀ𝐘 + λ𝐚 = 0.&lt;/p&gt;
&lt;p&gt;By moving items, the equation becomes:&lt;/p&gt;
&lt;p&gt;(𝐗ᵀ𝐗 + λ𝐈)𝐚 = 𝐗ᵀ𝐘,&lt;/p&gt;
&lt;p&gt;where the (𝐗ᵀ𝐗 + λ𝐈) is invertible.
The proof is as follows.&lt;/p&gt;
&lt;h2 id=&#34;proof&#34;&gt;Proof&lt;/h2&gt;
&lt;p&gt;Since 𝐗ᵀ𝐗 is a symmetric matrix, it can be diagonalized. Thus, 𝐗ᵀ𝐗 can be written as:&lt;/p&gt;
&lt;p&gt;$$
𝐗ᵀ𝐗 = 𝐏⁻¹
\begin{bmatrix}
λ₁ &amp;amp;   &amp;amp;    \\
&amp;amp; ⋱ &amp;amp;    \\
&amp;amp;   &amp;amp; λₙ
\end{bmatrix}
𝐏
$$&lt;/p&gt;
&lt;p&gt;The determinant of 𝐗ᵀ𝐗 is: &lt;br&gt;
|𝐗ᵀ𝐗| = |𝐏⁻¹| ⋅ |$^{^{λ₁}_{\quad ⋱}} _{\qquad λₙ}$| ⋅ |𝐏|
= λ₁ ⋅ λ₂ … ⋅ λₙ&lt;/p&gt;
&lt;p&gt;And λ₁, λ₂ …, λₙ are the eigen values for the 𝐗ᵀ𝐗&lt;/p&gt;
&lt;p&gt;Then the invertibility can be judged from this determinant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If |𝐗ᵀ𝐗| = 0, then 𝐗ᵀ𝐗 is not invertible,
because there are some zero lines in the matrix (after elementary row operations), that means r(𝐗ᵀ𝐗) &amp;lt; n.&lt;/li&gt;
&lt;li&gt;But if |𝐗ᵀ𝐗| &amp;gt; 0, the matrix 𝐗ᵀ𝐗 is invertible, because it has full rank, which is equal to the number of lines of rows. &lt;a class=&#34;link&#34; href=&#34;#%e9%ab%98%e5%b1%b119&#34; &gt;²&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Analyze the two cases without and with adding the regularization term:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Only the 𝐗ᵀ𝐗:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let this matrix be enclosed by a non-zero real row vector 𝛂ᵀ and its column vector 𝛂 to constuct a quadratic form: 𝛂ᵀ(𝐗ᵀ𝐗)𝛂, which is used to characterize the definiteness of 𝐗ᵀ𝐗. &lt;a class=&#34;link&#34; href=&#34;#wiki_Def&#34; &gt;³&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Based on the combination law of the matrix multiplication, it can be written as: (𝛂ᵀ𝐗ᵀ)(𝐗𝛂) = (𝐗𝛂)ᵀ(𝐗𝛂), which is the norm of the vector 𝐗𝛂. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;Because the norm is ≥ 0 definitely, the 𝛂ᵀ(𝐗ᵀ𝐗)𝛂 ≥ 0 (indicating 𝐗ᵀ𝐗 is positive semi-definite matrix).&lt;/li&gt;
&lt;li&gt;Based on the properties of quadratic form, eigen values λᵢ of 𝐗ᵀ𝐗 are all ≥ 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then the above determinant is |𝐗ᵀ𝐗|= λ₁ ⋅ λ₂ … ⋅ λₙ ≥ 0, so when |𝐗ᵀ𝐗| = 0, the rank of the matrix 𝐗ᵀ𝐗 is not full (≠ n), so the matrix 𝐗ᵀ𝐗 is not invertible. &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For 𝐗ᵀ𝐗+λ𝐈 (where λ is a hyper-parameter), it can be considered as a matrix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A quadratic form is constructed as: 𝛂ᵀ(𝐗ᵀ𝐗+λ𝐈)𝛂 = (𝛂ᵀ𝐗ᵀ)(𝐗𝛂) + λ𝛂ᵀ𝛂.&lt;/li&gt;
&lt;li&gt;The second item is always &amp;gt;0 because 𝛂 is not a zero vector, so its norm 𝛂ᵀ𝛂 &amp;gt; 0.&lt;/li&gt;
&lt;li&gt;Therefore, the matrix (𝐗ᵀ𝐗+λ𝐈) is a positive definite matrix.
The eigen values λᵢ of (𝐗ᵀ𝐗+λ𝐈) are all &amp;gt; 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The determinant of 𝐗ᵀ𝐗+λ𝐈 is the product of its eigen values, i.e., the determinant |𝐗ᵀ𝐗+λ𝐈|&amp;gt;0. So the matrix 𝐗ᵀ𝐗+λ𝐈 has full rank, and 𝐗ᵀ𝐗+λ𝐈 is invertible.&lt;/p&gt;
&lt;p&gt;Therefore, the optimal solution can be solved as 𝐚 = (𝐗ᵀ𝐗 + λ𝐈)⁻¹ 𝐗ᵀ𝐘. This is called the &amp;ldquo;least square - least norm solution&amp;rdquo;. (最小二乘-最小范数解)&lt;/p&gt;
&lt;p&gt;L2 regularization is originally added to make the 𝐗ᵀ𝐗 invertible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(bilibili search: &amp;ldquo;伪逆矩阵&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;todo: &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV14G411n7HY/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;01 2、最小二乘与pca（新） - 深度之眼官方账号-bilibili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;todo: &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1ns411r7dE/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【熟肉】线性代数的本质 - 06 - 逆矩阵、列空间与零空间 - 3B1B -bili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;todo: &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1gm4y1Q7hA/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【26 深入理解逆矩阵】- cf98982002 -bili&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;use-gpu-to-solve-inverse-faster&#34;&gt;Use GPU to solve inverse faster?&lt;/h2&gt;
&lt;p&gt;(DDG search: &amp;ldquo;矩阵求逆 gpu&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;The acceleration ratio of GPU to CPU is more than 16 times. &lt;a class=&#34;link&#34; href=&#34;#zhihu-%e5%86%af%e5%8d%9a%e5%a3%ab&#34; &gt;⁴&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-to-solve-inverse-matrix&#34;&gt;How to solve inverse matrix?&lt;/h2&gt;
&lt;p&gt;4 ways &lt;a class=&#34;link&#34; href=&#34;#zhihu-%e7%96%af%e7%8b%82%e7%bb%85%e5%a3%ab&#34; &gt;⁵&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gaussian Eliminate&lt;/li&gt;
&lt;li&gt;LU decomposition, commenly used by computer because it can be performed parallelly.&lt;/li&gt;
&lt;li&gt;SVD decomposition&lt;/li&gt;
&lt;li&gt;QR decomposition&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;div id=&#34;高山19&#34;&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ci4y1975D&#34;&gt;【俗说矩阵】行列式等于0意味着什么？你一定要了解哦~ - 晓之车高山老师 - bilibili&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;wiki_Def&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Definite_matrix&#34;&gt;Definite matrix -wiki&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;zhihu-冯博士&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/320545275&#34;&gt;GPU矩阵计算是否会更快？（基于Pytorch） - 半个冯博士的文章 - 知乎&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;zhihu-疯狂绅士&#34;&gt;&lt;a href=&#34;https://www.zhihu.com/question/356880062/answer/2135670915&#34;&gt;求逆矩阵的4种方法? - 疯狂绅士的回答 - 知乎&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>memo: DL | Normalization</title>
        <link>https://zichen34.github.io/writenotes/calc/dl_normalization/</link>
        <pubDate>Sat, 14 Jan 2023 12:54:12 -0500</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/dl_normalization/</guid>
        <description>&lt;h2 id=&#34;normalize-dataset&#34;&gt;Normalize Dataset&lt;/h2&gt;
&lt;p&gt;(2023-11-23)&lt;/p&gt;
&lt;p&gt;Normalizing a dataset means making the variance to 1.&lt;/p&gt;
&lt;p&gt;方差是一个标量（偏离期望的平方的期望）: the average of squared difference between each value in a dataset from the mean value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Square ignores the sign of deviations, and only focuses on magnitudes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Given 2 datasets with different scales: 1,2,6 and 10,20,60.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-*--*--▲------*   V.S.  -*--*--▲------*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Their variance are 4.66 and 46.6. After normalization, their variance will both become 1. (Plain number, without any practical meaning.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform the variance to 1: subtract mean and divide by std for each sample.&lt;/p&gt;
&lt;p&gt;$$
Var = \frac{∑(\frac{x-μ}{σ} - 0)²}{n}
= \frac{∑\frac{(x-μ)²}{σ²}}{n}
= \frac{1}{σ²} σ² = 1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The consequences of normalization have 2 aspects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Because all the &lt;em&gt;squared deviations&lt;/em&gt; (x-μ)² are scaled by their average: σ², the &lt;strong&gt;measuring unit is eliminated&lt;/strong&gt; (消除量纲).
Hence, different attributes (dimensions) can be compared equally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the other hand, the &lt;strong&gt;sum of the scaled&lt;/strong&gt; squared deviation becomes $n$. Thus, the new variance is 1.&lt;/p&gt;
&lt;p&gt;$$
Var = \frac{∑\frac{(x-μ)²}{σ²}}{n}
= \frac{∑\frac{(x-μ)²}{ \frac{∑(x-μ)²}{n} }}{n}
= \frac{n ∑\frac{(x-μ)²}{∑(x-μ)²} }{n} = \frac{n* 1}{n} =1
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analogy: $\frac{a}{a+b+c} + \frac{b}{a+b+c} + \frac{c}{a+b+c}=1$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Variance can be scaled to any value. Taking 1 is for interpretability and simplifying calculations (?)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;(2023-01-14)&lt;/p&gt;
&lt;h2 id=&#34;batchnorm&#34;&gt;BatchNorm&lt;/h2&gt;
&lt;p&gt;BatchNorm: 前向过程中每层的输入的分布一直在变化，不满足独立同分布，导致内部协变量偏移Internal Covariate Shift问题，
所以对每层的激活值在输入下一层之前，把这一个batch的分布调整为0均值，方差为1的标准正态分布，
即固定每个隐层节点的激活输入分布，让输入的激活值落在激活函数梯度较大的区域，加快收敛与避免梯度消失。
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/38176412&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Batch Normalization导读-张俊林-知乎&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2024-02-21) 不是“正态分布”，标准化不会改变数据的分布类型，数据原来是什么分布，做完 normalization 还是什么分布。
(mean=0, sigma=1) 只是一个 &lt;strong&gt;标准&lt;/strong&gt;，之后经过一些运算，分布的参数发生变化了，还可以回到这个标准。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;todo: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/34PDIFvvESc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;L11.2 How BatchNorm Works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;todo: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/uI19wIdzh9M&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;L11.4 Why BatchNorm Works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normalization layer 对数据减均值，除以标准差。以下的 N 是一个 batch 中的样本个数(batch size, B)，
图片batch：(N,C,H,W)，序列batch: (N, embed_dim, seq_len)。
1d,2d,3d方法的区别在于 input 的维度。
Learnable parameters 是γ 和 β 用于对 μ和σ 做 affine 变换。
running mean 和 running var 在训练时不断使用在前向时得到的 x 的mean 和 var 做加权更新，权重为动量 momentum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BatchNorm 让1个batch的，每个通道的均值为0，方差为1（整个batch的μ也=0）； &lt;br&gt;
指定通道数量input.shape[1]: &lt;code&gt;bn=nn.BatchNorm1d(num_features=C)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LayerNorm 让每个样本的全部通道（最后几维，一个单词的特征向量，一幅图片的feature map）的均值为0，方差为1，layer指的是 fc net 的一层；&lt;br&gt;
指定最后几维: &lt;code&gt;ln=nn.LayerNorm(normalized_shape=[C,H,W])&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InstanceNorm 让每个样本的每个通道的均值为0，方差为1，同一batch内的样本没有联系，用于风格迁移；&lt;br&gt;
指定通道数量: &lt;code&gt;in=nn.InstanceNorm1d(num_features=C)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GroupNorm 介于 LayerNorm 和 Instance Norm之间，通道分组=1 就是LN，通道分组=C 就是IN；&lt;br&gt;
指定通道分组: &lt;code&gt;gn=nn.GroupNorm(num_groups=2, num_channels=C)&lt;/code&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1MA411P7XZ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;lecture 7b 神经网络的训练(归一化，迁移学习）-ranchlai-bili&lt;/a&gt;;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/SanJerry007/Stanford-CS231n-2021-and-2022&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github repo&lt;/a&gt;&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://miro.medium.com/max/700/1*O2kJUz0MfZ754kLlcHtTBQ.jpeg&#34;&gt;&lt;center&gt;&lt;a href=&#34;https://arxiv.org/abs/1803.08494&#34;&gt;Wu&amp;He ECCV2018&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weight Norm&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;(2023-08-03)&lt;/p&gt;
&lt;h2 id=&#34;layernorm-customize&#34;&gt;LayerNorm Customize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LayerNorm, as referring to &lt;a class=&#34;link&#34; href=&#34;https://github.com/facebookresearch/ConvNeXt/blob/048efcea897d999aed302f2639b6270aedf8d4c8/models/convnext.py#L119C12-L119C12&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ConvNeXt-meta&lt;/a&gt;&amp;rsquo;s &lt;code&gt;nn.LayerNorm&lt;/code&gt;,
can only normalized the &lt;strong&gt;last&lt;/strong&gt; few channels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;F.layer_norm&lt;/code&gt; can be used to normlize one of the &lt;strong&gt;middle&lt;/strong&gt; dimensions, as in &lt;a class=&#34;link&#34; href=&#34;https://github.com/pytorch/vision/blob/9ebf10af02aeb882bd8d7782149e21b48528d562/torchvision/models/convnext.py#L30&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ConvNeXt-torchvision&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Loop of ChatGPT&amp;rsquo;s Wrong Solutions:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Q: In the following code, why is the &lt;code&gt;grad&lt;/code&gt; of self.weight None after &lt;code&gt;loss.backward()&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LayerNorm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Input data: (batch_size, C, H, W)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    Use F.layer_norm to do normalization 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    for the dim of channels.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1e-6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# C = 3, placeholder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Since the `normalized_shape` (#channels) of x is unknown when initializing the model,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;        implement normalization for the channels dimension here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# biased estimation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;224&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;224&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;myLN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LayerNorm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;myLN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;register_hook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;grad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grad&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;normalized_x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myLN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;target_x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;224&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;224&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MSELoss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;The redefined variables &lt;code&gt;self.weight&lt;/code&gt;, &lt;code&gt;self.bias&lt;/code&gt; inside the forward method are not part of the computation graph,
so their gradients won&amp;rsquo;t be computed during the backward pass.&lt;/p&gt;
&lt;p&gt;And the new created parameter tensors have &lt;strong&gt;no connection&lt;/strong&gt; to the original &lt;code&gt;self.weight&lt;/code&gt; and &lt;code&gt;self.bias&lt;/code&gt; (created during initialization),
which are not used in the forward pass. so their &lt;code&gt;grad&lt;/code&gt; attribute remain &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, he suggested me don&amp;rsquo;t redefine in the forward.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: But I don&amp;rsquo;t have information about the &lt;strong&gt;shape&lt;/strong&gt; of self.weight to initialize it inside the &lt;strong&gt;init&lt;/strong&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Initialize them as &lt;code&gt;None&lt;/code&gt; in the &lt;code&gt;__init__&lt;/code&gt; method and then initialize them with the correct shape during the first forward pass.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LayerNorm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1e-6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Placeholder for the shape of self.weight&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Placeholder for the weight parameter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Placeholder for the bias parameter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Initialize self.normalized_shape and create weight and bias with the correct shape&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This code has an &lt;code&gt;ValueError: optimizer got an empty parameter list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anwser&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apologies for the oversight.
The error is happening because the &lt;code&gt;LayerNorm&lt;/code&gt; class does not define any learnable parameters (weights and biases) in its &lt;code&gt;__init__&lt;/code&gt; method.
As a result, when you try to pass &lt;code&gt;myLN.parameters()&lt;/code&gt; to the optimizer, it doesn&amp;rsquo;t find any parameters to optimize,
leading to the &amp;ldquo;optimizer got an empty parameter list&amp;rdquo; error.&lt;/p&gt;
&lt;p&gt;In order to use an optimizer like Adam, you need to define at least one learnable parameter within your model that will be optimized during training.&lt;/p&gt;
&lt;p&gt;Since you don&amp;rsquo;t have information about the shape of the input during initialization,
you can create a placeholder for &lt;code&gt;self.weight&lt;/code&gt; and &lt;code&gt;self.bias&lt;/code&gt; in the &lt;code&gt;__init__&lt;/code&gt; method,
and then initialize them with the correct shape during the first forward pass.
To do this, we can use the &lt;code&gt;register_buffer&lt;/code&gt; method, which allows us to create tensors that are not optimized during training but still part of the model.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the updated code with the use of &lt;code&gt;register_buffer&lt;/code&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LayerNorm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1e-6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;register_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;normalized_shape&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;register_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;register_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bias&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# Initialize self.normalized_shape and create weight and bias with the correct shape&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normalized_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Now the model will contain learnable parameters that can be optimized using an optimizer like Adam.
The &lt;code&gt;grad&lt;/code&gt; attribute of &lt;code&gt;self.weight&lt;/code&gt; should be available and updated after &lt;code&gt;loss.backward()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, you can also use &lt;code&gt;torch.nn.init&lt;/code&gt; functions to initialize the weight and bias tensors in a more standard way.
For example, you can use &lt;code&gt;torch.nn.init.ones_&lt;/code&gt; and &lt;code&gt;torch.nn.init.zeros_&lt;/code&gt; to initialize the &lt;code&gt;self.weight&lt;/code&gt; and &lt;code&gt;self.bias&lt;/code&gt; tensors, respectively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;register_buffer&lt;/code&gt; doesn&amp;rsquo;t add parameters to optimizer to optimize neither.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It may be &lt;strong&gt;necessary&lt;/strong&gt; to know the number of channels.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Just &lt;strong&gt;sum up&lt;/strong&gt; the attribute &lt;code&gt;out_chnnels&lt;/code&gt; of each layer, e.g., &lt;code&gt;alexnet.features[0].out_channels&lt;/code&gt;.
&lt;a class=&#34;link&#34; href=&#34;https://discuss.pytorch.org/t/get-the-input-channels-for-the-conv2d-from-previous-layer/78510/2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PyTorch Forum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But Swin transformer doesn&amp;rsquo;t have Conv2d.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maybe I can only &lt;strong&gt;hard code&lt;/strong&gt; the numbers of channels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you add the norm layer following the convolution layer, the &lt;code&gt;normalized_shape&lt;/code&gt; is the out_channels of the convolution layer.&lt;/p&gt;
&lt;p&gt;But here, I want to normalize the stacked extracted feature maps. So I need to know the total channels of the incoming feature maps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the #channels is known, I can use &lt;code&gt;F.layer_norm()&lt;/code&gt; directly.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(2023-10-17)&lt;/p&gt;
&lt;h2 id=&#34;absorb-bn&#34;&gt;Absorb BN&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Normalization&lt;/strong&gt; is performed to keep each &amp;ldquo;stage&amp;rdquo; (layer) in a network maintain the &lt;strong&gt;same distribution&lt;/strong&gt;,
such that the training could be more efficient due to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Leaving out modeling &lt;strong&gt;distributions shift&lt;/strong&gt; of each layer&amp;rsquo;s input data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stabilizing optimization by suppressing &amp;ldquo;outliers&amp;rdquo; (high value) in the output feature map of each layer to &lt;strong&gt;avoid big variations&lt;/strong&gt; in the final prediction.&lt;/p&gt;
&lt;p&gt;Refer to: &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/421632235&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BN、BN同步、吸收BN - EveK的文章 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specifically, input data has (mean=0, std=1), but after a conv layer, the outcome feature maps may don&amp;rsquo;t persist (mean=0, std=1).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ideally, featue maps&amp;rsquo;s distribution should be transformed to (mean=0, std=1) to align with the input data.
And that transformation requires its &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Whitening_transformation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;whitening matrix&lt;/a&gt;
, which transforms co-variance matrix of the feature maps an identity matrix, meaning &lt;strong&gt;each dimension is unrelated&lt;/strong&gt;.
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_37872766/article/details/102957235&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CSDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, solving the whitening matrix for a &lt;strong&gt;high-dimension&lt;/strong&gt; tensor is time consuming.&lt;/p&gt;
&lt;p&gt;Therefore, the &amp;ldquo;whitening&amp;rdquo; is performed only for each channel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the other hand, it&amp;rsquo;s difficult to get the exact distributions at once, because the data is trained batch-by-batch.&lt;/p&gt;
&lt;p&gt;Therefore, the distribution to be corrected pertains only to the small batch of data.
(Or involving previous data by using &lt;strong&gt;moving average of history&lt;/strong&gt; mean and std)&lt;/p&gt;
&lt;p&gt;And only 2 parameters (mean, std) of their distribution are considered to keep the distributions consistent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once a feature map $M_{(N, C, H, W)}$ spit out from a conv layer,
BatchNorm normalizes the data at the &lt;strong&gt;same channel&lt;/strong&gt; for &lt;strong&gt;all N samples&lt;/strong&gt; in the batch:&lt;/p&gt;
&lt;pre class=&#34;pseudocode&#34; data-line-number=true&gt;\begin{algorithm}
\begin{algorithmic}
\FOR {i=0 \TO M.size(1)}
  \PROCEDURE{BN}{ M, meanʰ, stdʰ, scale, bias}
    \STATE mean = M[:, i, :, :].sum() / N   

    \STATE std = ( (M[:, i, :, :] - mean)² / N ).sqrt()

    \STATE M⁰¹ = (M[:, i, :, :] - mean) / std

    \STATE M&#39; = scale * M⁰¹ + bias
  \ENDPROCEDURE
\ENDFOR
\end{algorithmic}
\end{algorithm}
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;meanʰ and stdʰ are from history.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The scale factor γ and bias β are for the situation where the variation is very small.
Then the differences can be magnified through scaling to avoid representation capacity degradation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And γ,β are required to be &lt;strong&gt;learnable&lt;/strong&gt; to automatically find the appropriate feature levels.
Otherwise, bias will grow to infinity as explained in &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/1502.03167&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;paper&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Combine BN into wights and bias of the last layer&lt;/p&gt;
&lt;p&gt;$$
M&amp;rsquo; = γ \frac{M - mean}{std} + β
= \frac{γ⋅M}{std} \left( β - \frac{γ ⋅ mean}{std} \right)
$$&lt;/p&gt;
&lt;p&gt;If M is calculated as $M = w⋅x + b$, by substituting it, the equation becomes:&lt;/p&gt;
&lt;p&gt;$$
M&amp;rsquo;= \frac{γ⋅w}{std} x + \left( β - \frac{γ⋅mean}{std} + \frac{γ⋅b}{std} \right)
$$&lt;/p&gt;
&lt;p&gt;Thus, w becomes $\frac{γ⋅w}{std}$ and b becomes $( β - \frac{γ⋅mean}{std} + \frac{γ⋅b}{std} )$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Given a conv layer with $C_i$ input channels and $C_o$ output channels,
BN for this layer has $C_i × C_o$ parameters, where $C_i$ is for the history channels, $C_o$ is for target channels.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>memo: DL | Weight initialization</title>
        <link>https://zichen34.github.io/writenotes/calc/dl_weight_initialization/</link>
        <pubDate>Sat, 14 Jan 2023 12:24:00 -0500</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/dl_weight_initialization/</guid>
        <description>&lt;p&gt;The maximum gradient of the sigmoid activation function is 0.25, which may cause partial derivative of &lt;code&gt;loss&lt;/code&gt; with respect to the earlier weight &lt;code&gt;w&lt;/code&gt; very small after passing throught multipler layers.
And scaling the weights down can mitigate the gradient decrease.&lt;/p&gt;





  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/DL_Weight_Initialization_derivative_sigmoid.png width=&gt;
  
  


&lt;p&gt;Based on the chain rule, the derivative of the weight in the fisrt layer (l=1) is ∂loss/∂w¹ = ∂loss/∂o ⋅ ∂o/∂a² ⋅ ∂a²/∂a¹ ⋅ ∂a¹/∂w¹, where a = g(z), g is an activation function.&lt;/p&gt;
&lt;p&gt;If the weight w¹ is small, the activation z¹ is small (around zero), so ∂a¹/∂z¹ corresponds to the highest derivative.
And also if w² is small, ∂a²/∂a¹ = ∂a²/∂z²⋅ ∂z²/∂a¹, where ∂a²/∂z² will be a big derivative.
Hence, ∂loss/∂w¹ can maintain a high derivative.&lt;/p&gt;
&lt;p&gt;So it&amp;rsquo;s importance to initialize the weights centered at zero with small variance for getting the maximum gradient.
&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/RsX01aYbQdI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;L11.5 Weight Initialization &amp;ndash; Why Do We Care?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Activation z is a sum of wᵢxᵢ, so it may be exploding or vanishing quickly if the W doesn&amp;rsquo;t have constriant.
&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/s2coXdufOzE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Weight Initialization in a Deep Network (C2W1L11) - Andrew Ng&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;xavier-glorot-initialization&#34;&gt;Xavier (Glorot) initialization&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/ScWTYHQra5E&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;L11.6 Xavier Glorot and Kaiming He Initialization - Sebastian Raschka&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Initialize weights from Gaussian or uniform distribution&lt;/li&gt;
&lt;li&gt;Step 2: Scale the weights proportional to the number of input features to the layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particular, the weights of layer l is defined as:
𝐖 ⁽ˡ⁾ ≔ 𝐖 ⁽ˡ⁾⋅ √(1/m⁽ˡ⁻¹⁾),
where m is the number of input units of the previous layer (𝑙-1) to the next layer (𝑙).&lt;/p&gt;
&lt;p&gt;𝐖 is initialized from Gaussion (or uniform) distribution: Wᵢⱼ⁽ˡ⁾~N(μ=0, σ²=0.01)&lt;/p&gt;
&lt;p&gt;Rationale behind this scaling factor:&lt;/p&gt;
&lt;h3 id=&#34;he-kaiming-initialization&#34;&gt;He (Kaiming) initialization&lt;/h3&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;Three different commonly used initialization techniques. Here are what their variants need to be set to and which activation functions they work best with.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Initialization&lt;/th&gt;
&lt;th&gt;Activation function&lt;/th&gt;
&lt;th&gt;Variance (σ²)&lt;/th&gt;
&lt;th&gt;Mean&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Glorot&lt;/td&gt;
&lt;td&gt;Linear; Tanh; Sigmoid; Softmax&lt;/td&gt;
&lt;td&gt;σ² = 1/(½⋅(fanᵢₙ+fanₒᵤₜ))&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;He&lt;/td&gt;
&lt;td&gt;ReLu; Variants of ReLU&lt;/td&gt;
&lt;td&gt;σ² = 2/fanᵢₙ&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LeCun&lt;/td&gt;
&lt;td&gt;SELU&lt;/td&gt;
&lt;td&gt;σ² = 1/fanᵢₙ&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/tYFO434Lpm0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Weight Initialization for Deep Feedforward Neural Networks&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MAP examples</title>
        <link>https://zichen34.github.io/writenotes/calc/map_examples/</link>
        <pubDate>Thu, 15 Dec 2022 23:00:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/map_examples/</guid>
        <description>&lt;h2 id=&#34;2连咸饼--p袋子&#34;&gt;2连咸饼 ➔ P(袋子)&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/liliu/archive/2010/11/24/1886110.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从同一袋子里连续取出了2个咸饼干&lt;/a&gt;，问最有可能是以下5个袋子中的哪个？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;饼干比例:&lt;/th&gt;
&lt;th&gt;100%甜&lt;/th&gt;
&lt;th&gt;75%甜25%咸&lt;/th&gt;
&lt;th&gt;50%甜50%咸&lt;/th&gt;
&lt;th&gt;25%甜75%咸&lt;/th&gt;
&lt;th&gt;100%咸&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MLE&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0625&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;td&gt;0.5625&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设从每个袋子中取出咸饼干的概率是p，则MLE 只需对每个袋子求p²，则第5个袋子的似然最大。而MAP还要考虑各袋子出现的概率g，所以MAP函数为 p²×g，可得第4个袋子的后验最大&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;先验g (袋子出现的概率)&lt;/th&gt;
&lt;th&gt;0.1&lt;/th&gt;
&lt;th&gt;0.2&lt;/th&gt;
&lt;th&gt;0.4&lt;/th&gt;
&lt;th&gt;0.2&lt;/th&gt;
&lt;th&gt;0.1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;袋中咸饼干比例 θ&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.75&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事件 X:二连咸(MLE)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0625&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;td&gt;0.5625&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAP&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0125&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.1125&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;后验&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3.85%&lt;/td&gt;
&lt;td&gt;30.8%&lt;/td&gt;
&lt;td&gt;34.6%&lt;/td&gt;
&lt;td&gt;30.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;因为这里的样本空间由两个随机变量组成：事件X和袋子概率g，所以P(X)就是在所有θ可能的情况下X发生的概率和(0.325)。因为P(X)是个常数，所以做 MAP 只看分子就行。&lt;/p&gt;
&lt;h2 id=&#34;男生--p打lol&#34;&gt;男生 ➔ P(打lol)&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/26464206&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一个男生，求他打lol的概率&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;先验g&lt;/th&gt;
&lt;th&gt;60%&lt;/th&gt;
&lt;th&gt;40%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;男女比例 θ&lt;/td&gt;
&lt;td&gt;80%男20%女&lt;/td&gt;
&lt;td&gt;20%男80%女&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事件X:1男 (MLE)&lt;/td&gt;
&lt;td&gt;0.8&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事件X:1男 (MAP)&lt;/td&gt;
&lt;td&gt;0.48&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;后验&lt;/td&gt;
&lt;td&gt;85.7%&lt;/td&gt;
&lt;td&gt;14.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;9正1反--p硬币&#34;&gt;9正1反 ➔ P(硬币)&lt;/h2&gt;
&lt;p&gt;抛10次硬币9正1反，求这枚硬币朝上的概率? &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Ea4y1J7Jq/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【机器学习我到底在学什么】哲学角度聊聊贝叶斯派和频率派，数学角度看看极大似然估计和最大后验估计&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;频率派会说是0.9，因为这样对应&amp;quot;抛出9次朝上&amp;quot;的概率最大；
贝叶斯派依据贝叶斯公式，带入先验概率和实验结果，认为向上概率落在 0.5~0.9 之间的概率最大:
比如参数θ&amp;rsquo;=0.5 的先验概率是 P(θ&amp;rsquo;)=0.8, 把θ&amp;rsquo;=0.5 带入二项分布可算出事件9正1反发生的概率：P(X|θ&amp;rsquo;)=C₉¹⁰⋅(0.5)⁹⋅(0.5)¹=0.00976. 所以贝叶斯公式的分子=0.8×0.00976=0.00781。
而分母 P(X) 应为 θ 从0取到1时，各种0对应的事件X:9正1反发生的似然之和，但从0到1 是不可数的，无法得到解析解，可以做数值模拟。下面的例子只假设样本空间只有 3 中参数θ 的取值：0.5, 0.9, 0.4。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;先验 g&lt;/th&gt;
&lt;th&gt;80%&lt;/th&gt;
&lt;th&gt;1%&lt;/th&gt;
&lt;th&gt;19%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;参数 θ&lt;/td&gt;
&lt;td&gt;50%上50%下&lt;/td&gt;
&lt;td&gt;90%上10%下&lt;/td&gt;
&lt;td&gt;40%上60%下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事件 X&lt;/td&gt;
&lt;td&gt;C₉¹⁰⋅(0.5)⁹⋅(0.5)¹&lt;/td&gt;
&lt;td&gt;C₉¹⁰(0.9)⁹(0.1)¹&lt;/td&gt;
&lt;td&gt;C₉¹⁰(0.4)⁹(0.9)¹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MLE&lt;/td&gt;
&lt;td&gt;0.00976&lt;/td&gt;
&lt;td&gt;0.387&lt;/td&gt;
&lt;td&gt;0.00236&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAP&lt;/td&gt;
&lt;td&gt;0.00781&lt;/td&gt;
&lt;td&gt;0.00387&lt;/td&gt;
&lt;td&gt;0.000448&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;后验&lt;/td&gt;
&lt;td&gt;64.4%&lt;/td&gt;
&lt;td&gt;31.9%&lt;/td&gt;
&lt;td&gt;3.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中 MLE = P(X|θ), MAP = P(X|θ)P(θ), 而“事件X发生，参数取到θ的概率”:
P(θ|X) = MAP/P(X)，其中 P(X) 是事件X在样本空间中发生的概率，应为当参数取各种 θ 时，事件X 发生的条件概率 之和，也就是各种θ 对应的 MAP 求和。&lt;/p&gt;
&lt;h2 id=&#34;感觉不太恰当&#34;&gt;感觉不太恰当&lt;/h2&gt;
&lt;p&gt;甲地下雨了，求乙地下雨概率 &lt;a class=&#34;link&#34; href=&#34;https://www.sohu.com/a/299764803_518695&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;条件概率 例题&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;特征--p嫁&#34;&gt;特征 ➔ P(嫁)&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Raspberrycai1/Exercise-Python/tree/master/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E9%AA%8C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据挖掘实验-Naive Bayes&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>memo: DL | Loss Functions</title>
        <link>https://zichen34.github.io/writenotes/calc/dl_loss_functions/</link>
        <pubDate>Sun, 06 Nov 2022 22:23:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/dl_loss_functions/</guid>
        <description>&lt;p&gt;(2022-5-25)
损失函数是输入样本batch的函数，不同batch的误差函数不同，如果在一个batch上某 w 的导数为零，在下一个batch上该 w 的导数不为零，就可以继续修正，而不会停滞在鞍点。误差函数横轴是 w，纵轴是 error。&lt;a class=&#34;link&#34; href=&#34;#ytbLee&#34; &gt;0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-loss-functions&#34;&gt;3 loss functions&lt;/h2&gt;
&lt;p&gt;损失函数是为了: 衡量两个概率模型间的差别，
三种思路：最小二乘法(MSE)，极大似然估计(MLE)，交叉熵(CE) &lt;a class=&#34;link&#34; href=&#34;#ref-%e6%8d%9f%e5%a4%b1%e5%87%bd%e6%95%b0%e7%8e%8b%e6%9c%a8%e5%a4%b4&#34; &gt;¹&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mse&#34;&gt;MSE&lt;/h3&gt;
&lt;p&gt;对于单分类问题（是or不是），也就是抛硬币（反面的概率已经蕴含在正面的概率之中了），那么：&lt;br&gt;
&lt;strong&gt;最小二乘&lt;/strong&gt;就是：概率(sigmoid输出0~1)减标签。为了依据误差修正w，误差取平方使其可导。如果损失函数中代入的是预测的正(反)概率，那损失函数是个二次曲线 L = (prob - label)²，横坐标是概率，纵坐标是loss，当prob=target, 预测出来的值与离散的观察值最接近。&lt;/p&gt;
&lt;p&gt;对于输出是多维的，在各个维度上都是二次曲线，多元最小二乘（多元线性回归）: J(w) = (Xw-Y)ᵀ(Xw-Y)。解∇J(w) = 0，就是求 pseudoinverse matrix &lt;a class=&#34;link&#34; href=&#34;#ref-csdn%e5%b0%8f%e5%a4%a9&#34; &gt;⁸&lt;/a&gt;。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;如果这样能一次求出 w，为什么还要梯度下降呢？ 因为有时 X 不可逆（可以加正则化项解决 &lt;a class=&#34;link&#34; href=&#34;https://zichen34.github.io/writenotes/calc/pseudo-inverse/&#34; &gt;note&lt;/a&gt;），
而且有的激活函数 g 也不可逆（通过手动做归一化解决，例如 &lt;a class=&#34;link&#34; href=&#34;https://zichen34.github.io/writenotes/model/subnetwork/b-note-elm-bidirec/&#34; &gt;B-ELM&lt;/a&gt; 中使用了 minmax 函数）。&lt;/p&gt;
&lt;p&gt;当MSE 用于回归问题，loss=∑ᵢ(yᵢ-wxᵢ-b)²是凸函数，直接求导等于零，即可求出解析解；但是用于分类问题，输出需要经过sigmoid/softmax变成概率，loss=∑ᵢ(yᵢ-1/(1+e⁻ʷˣⁱ))²是非凸的，不能直接求解析解，而且不宜优化 &lt;a class=&#34;link&#34; href=&#34;#ref-%e8%8b%8f%e5%ad%a6%e7%ae%97%e6%b3%95&#34; &gt;³&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;mle&#34;&gt;MLE&lt;/h3&gt;
&lt;p&gt;极大似然估计：各个可能的假设模型产生训练样本标签的分布的概率是多少，目标就是找到概率最大时对应的模型（加个负号取最小）；∏ᵢ pᵢˣ (1-pᵢ)¹⁻ˣ&lt;/p&gt;
&lt;h3 id=&#34;ce&#34;&gt;CE&lt;/h3&gt;
&lt;p&gt;交叉熵：网络模型要与人脑中的模型足够接近，某一事件在网络模型中发生对应的信息量要接近在人脑中发生对应的信息量，多个事件要以他们在人脑中发生的概率加权。∑ᵢ humanᵢ(-log₂ netᵢ)&lt;/p&gt;
&lt;p&gt;最小二乘可以用于回归，即网络输出可以是任意的数值；而极大似然估计和交叉熵都是基于概率的，网络的输出是概率，位于0-1之间，所以采用MLE或CE损失函数时，输出层神经元的激活函数需要用sigmoid，把输出压缩到0-1之间; 而隐藏层都可以用ReLu。
多类别问题输出用 softmax 激活，得到各类别的概率分布。&lt;/p&gt;
&lt;p&gt;交叉熵认为各类别相互独立，每一维是一个二分类器，单个样本的概率（似然）是：P₁ʸ¹ ⋅ P₂ʸ² ⋅ &amp;hellip; ⋅ Pₖʸᵏ，&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;/a&gt; 所以需要用 softmax 做一下归一化&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mse-与-ce-区别&#34;&gt;MSE 与 CE 区别&lt;/h2&gt;
&lt;p&gt;(Google search: &amp;ldquo;为什么不用mse做损失函数&amp;rdquo;)&lt;/p&gt;
&lt;h3 id=&#34;mse-不适合分类问题ref-简书&#34;&gt;MSE 不适合分类问题&lt;a class=&#34;link&#34; href=&#34;#ref-%e7%ae%80%e4%b9%a6&#34; &gt;²&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;工程角度&lt;/strong&gt;：如果用MSE做分类，对 softmax 的输出使用 MSE，即正确类的概率越接近 1 越好，其他类的概率越小越好:
minimize Loss = (prob_true-1)² + ∑(prob_other)²。
但是在 Loss 的梯度表达式中存在 prob_true 这个因子，可能在训练初期 prob_true 很小，梯度趋于0，无法更新。
而在用 CE 做Loss时，它的梯度中不含有单独的 prob_true 这一项（被消掉了），就不易发生梯度消失&lt;a class=&#34;link&#34; href=&#34;#ref-%e7%ae%80%e4%b9%a6&#34; &gt;²&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;(2022-11-06) 分类问题常使用 softmax，所以适合使用CE；而回归问题不常使用softmax，所以适合使用 MSE。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理论角度&lt;/strong&gt;：二者假设不同，MSE假设观察到的 y&amp;rsquo;=真实y+高斯噪声，所以通过极大似然法求解一组参数使得对应的高斯噪声最小的情况。所以MSE求解出来的值会更偏向于各个离散的观察值。而CE的假设应该是多分类情况下，拟合不同类别的概率分布。&amp;ldquo;多分类问题的分布符合多项式分布，CE是多项式分布的最大似然&lt;a class=&#34;link&#34; href=&#34;#ref-%e7%9f%a5%e4%b9%8edimaria%e8%af%84%e8%ae%ba&#34; &gt;⁵&lt;/a&gt;&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;交叉熵不适用回归问题ref-cnblog&#34;&gt;交叉熵不适用回归问题&lt;a class=&#34;link&#34; href=&#34;#ref-cnblog&#34; &gt;⁴&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在(多)分类问题中，交叉熵的损失函数只和分类正确的预测结果有关系，而MSE的损失函数还和错误的分类有关系，因此该&amp;quot;分类&amp;quot;函数除了让正确的分类尽量变大，还会让错误的分类变得平均，但实际在分类问题中，MSE 的这个调整是没有必要的 &lt;a class=&#34;link&#34; href=&#34;#ref-%e9%83%9d%e6%9b%8c%e9%aa%8f&#34; &gt;⁶&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;把 &lt;strong&gt;多分类问题&lt;/strong&gt; 中的 &amp;ldquo;类别&amp;rdquo; 对应到 &lt;strong&gt;多元回归问题&lt;/strong&gt; 中的 &amp;ldquo;特征&amp;rdquo;。对于一个连续的输出量，应是由各个特征共同作用的，分别有不同的贡献，而不能只看重某一个特征，所以CE不适合回归问题。但也可以用 &lt;a class=&#34;link&#34; href=&#34;#ref-%e5%86%b7%e6%af%94%e7%89%b9&#34; &gt;⁷&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;损失函数的性质&#34;&gt;损失函数的性质&lt;/h2&gt;
&lt;p&gt;(2023-02-17)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可微分性&lt;/li&gt;
&lt;li&gt;可导性&lt;/li&gt;
&lt;li&gt;单调性&lt;/li&gt;
&lt;li&gt;凸性&lt;/li&gt;
&lt;li&gt;可分离性&lt;/li&gt;
&lt;li&gt;可表示性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;借助 pytorch 可视化损失函数的导数&lt;a class=&#34;link&#34; href=&#34;#bili%e6%a2%97&#34; &gt;9&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;torch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;plt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;abs_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requires_grad_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abs_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;detach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;detach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;y_prime&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;autograd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_graph&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;detach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y_prime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;detach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;
&lt;div id=&#34;ytbLee&#34;&gt;&lt;a href=&#34;https://youtu.be/zzbr1h9sF54&#34;&gt;【機器學習2021】類神經網路訓練不起來怎麼辦 (二)： 批次 (batch) 與動量 (momentum)-李宏毅&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-损失函数王木头&#34;&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Y64y1Q7hi?spm_id_from=333.999.0.0&#34;&gt;“损失函数”是如何设计出来的？直观理解“最小二乘法”和“极大似然估计法”&lt;/a&gt;&lt;/div&gt; 
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-简书&#34;&gt;&lt;a href=&#34;https://www.jianshu.com/p/5d13bcd9d990&#34;&gt;机器学习面试之MSE与CE的区别？- 简书&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-苏学算法&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/420470098&#34;&gt;交叉熵损失(Cross-entropy)和平方损失(MSE)究竟有何区别？&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-cnblog&#34;&gt;&lt;a href=&#34;https://www.cnblogs.com/USTC-ZCC/p/13219281.html&#34;&gt;为什么均方差（MSE）不适合分类问题？交叉熵（cross-entropy）不适合回归问题？&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-知乎dimaria评论&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/61944055&#34;&gt;简单的交叉熵，你真的懂了吗？ - 蔡杰的文章 - 知乎&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-郝曌骏&#34;&gt;&lt;a href=&#34;https://github.com/HAOzj/Classic-ML-Methods-Algo/blob/master/ipynbs/appendix/loss_function/MSE%20vs%20Cross-entropy.ipynb&#34;&gt;分类模型中交叉熵比MSE更合适 - 郝曌骏- github&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-冷比特&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/362496849&#34;&gt;分类必然交叉熵，回归无脑MSE？未必 - 冷比特er的文章 - 知乎&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-csdn小天&#34;&gt;&lt;a href=&#34;https://blog.csdn.net/m0_47146037/article/details/120955457&#34;&gt;机器学习基础学习-多元线性回归问题（数学解实现）- csdn&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;bili梗&#34;&gt;&lt;a href=&#34;https://www.bilibili.com/read/cv21884273&#34;&gt;6.2 损失函数性质 - 梗直哥丶(质量不高，只看代码)&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>memo: Calc | Quaternion</title>
        <link>https://zichen34.github.io/writenotes/calc/quaternion/</link>
        <pubDate>Wed, 31 Aug 2022 22:00:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/quaternion/</guid>
        <description>&lt;img src="https://img.youtube.com/vi/d4EgbgTm0Bg/maxresdefault.jpg" alt="Featured image of post memo: Calc | Quaternion" /&gt;&lt;h2 id=&#34;stereographic-projection&#34;&gt;Stereographic Projection&lt;/h2&gt;
&lt;p&gt;Source video: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/d4EgbgTm0Bg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Visualizing quaternions (4d numbers) with stereographic projection&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Leveraging projection to reduce the dimensionality by 1.
Such that quaternion in 4D space can be learned through the projection counterparts in 3D space.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把 (i-实轴) &lt;strong&gt;单位圆&lt;/strong&gt; 做球极投影 stereographic projection 到 y 轴上:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从 x 轴的 -1 点出发过圆上每个点做射线，与 y 轴的交点即是圆上点的投影，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在这条投影线上，靠近 0 的点密集，越往外越稀疏，-i 和 i 是真实的圆上的点（代表着 x 为 0 的圆上点），(-i,i) 之间是右半圆的投影；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左乘 i 就是圆逆时针旋转 90 度，就是 1 ➔ i ➔ -1 ➔ -i 做一次循环移位。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把三维 (i-j-实轴) &lt;strong&gt;单位球&lt;/strong&gt;投影到水平面上:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从实轴的 -1 点出发连接球面上各点，与 i-j 平面交点即为投影点，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;赤道是真实的球面上的点（代表着实部为 0 的三维复数），赤道之内是北半球的投影，之外是南半球的投影，
赤道两侧是对称的，极点附近的投影点密集；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左乘 i 就是球在 i 轴方向顺时针旋转 90°，赤道和零度经线共同在 1-i 平面内完成了一次 1 ➔ i ➔ -1 ➔ -i 循环移位，
乘以 j 就是球在 j 轴方向上顺时针，在 1-j 平面内完成一次 1➔ j ➔ -1 ➔ -j 循环移位&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把四维 (i-j-k-实轴) &lt;strong&gt;单位超球&lt;/strong&gt;投影，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从实轴的 -1 点出发连接超球面上各点，与某个平面的交点形成一个个球面，每个球面就是每个四元数的投影，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 i-j-k 空间的三维单位球是真实的超球面上的点（代表着所有实部为 0 的四元数），
单位球内是实部为 0-1 之间的四元数的投影，负数实部的四元数被投影到了单位球外，实部=-1 的四元数在无穷远处(我们看不到)，&lt;/p&gt;
&lt;p&gt;我们能看到的投影点都有相同的模长（？不懂），四元数旋转时，就是三个维度共同移位，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2023-11-07) 如果绘制出来的三维球代表 i,j,k 三个虚轴，那实轴就画不出来了，只能先固定它再分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（把以上两种情况合起来:）i 是圆的球极投影，&amp;lsquo;j+k&amp;rsquo; 是球的球极投影，
i 的移位顺序是 1,i,-1,-i，&amp;lsquo;jk&amp;rsquo; 的移位顺序是 j,k,-j,-k。
i 与 jk 满足右手定则：拇指指向 i，则四指卷曲方向就是 jk 旋转方向（拇指指向 j，k ➔ i ➔ -k ➔ -i 循环移位）&lt;/p&gt;

     
     
     
     
       
       
       
       
        
       
       
        
       
       &lt;img src= /writenotes/calc/img/Quaternion.jpeg width=&gt;
       
       
     

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1SW411y7W1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;四元数的可视化-3B1B + Krasjet评论&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;(2023-11-07)&lt;/p&gt;
&lt;h2 id=&#34;3d-rotation&#34;&gt;3D Rotation&lt;/h2&gt;
&lt;p&gt;Because projection has been performed, the real axis is collapsed.&lt;/p&gt;
&lt;p&gt;So when &amp;ldquo;rotating&amp;rdquo;，the real axis is fixed and &lt;strong&gt;only imaginary axes rotate&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, a 4-D quaternion can be used to describe the &lt;strong&gt;rotation in 3D space&lt;/strong&gt; through its mutable 3 imaginary axes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compared with Euler angles that define the hierarchical &lt;strong&gt;order of three angles&lt;/strong&gt;,
quaternion depicts the evolution of a single 4D vector.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Convert a quaternion to a 3x3 rotation matrix&lt;/p&gt;
</description>
        </item>
        <item>
        <title>memo: MLP Nonlinearity</title>
        <link>https://zichen34.github.io/writenotes/calc/dl_mlp_nonlinearity/</link>
        <pubDate>Mon, 14 Feb 2022 23:10:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/dl_mlp_nonlinearity/</guid>
        <description>&lt;h3 id=&#34;multi-layer-perceptron&#34;&gt;Multi-Layer Perceptron&lt;/h3&gt;
&lt;p&gt;MLP consists of many layers of perceptrons. MLP 由多层感知机构成。
Perceptrons 只能解决线性二分类问题，是因为它采用的&lt;strong&gt;阶跃激活函数&lt;/strong&gt;：
$e(t)=\{^{0,t&amp;lt;0}_{1,t&amp;gt;0}$，只能确定多维输入空间中的一个超平面_。&lt;/p&gt;
&lt;p&gt;比如在二维空间中，它就无法解决异或问题。要产生非线性（斜率不固定）的决策边界可以换用非线性的激活函数，sigmoid function, tanh 或者 ReLu等等。它们使得感知机可以表达曲线，也就是即使输入超过阈值一些，输出没有对应的变化，依然为0。此时输入输出不再是线性关系，而不像阶跃函数，超过阈值就输出1。引入非线性之后，多层感知机才可以逼近任意非线性的决策边界。否则，MLP就相当于多条直线加权相加，最终得到的还是一条直线&lt;a class=&#34;link&#34; href=&#34;#ref4&#34; &gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;，只能给出0-1分类。(这里的多条直线并不是联立求方程组，可以限定一块区域，而是被感知机加权，最后还是一条直线: wn(&amp;hellip;(w2(w1+b1)+b2+&amp;hellip;+bn) ）。Example with cubic function.&lt;a class=&#34;link&#34; href=&#34;#ytb-Emerg&#34; &gt;6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一方面非线性激活函数可以帮助自动调整权重。多层感知机会带来大量需要调节的权重 w &lt;a class=&#34;link&#34; href=&#34;#ref1&#34; &gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;，手动调节是不可能实现的。阶跃函数的纵轴是0或1，横轴是wx（激活值），w的微小变化会导致激活值发生变化，如果输出层采用阶跃函数，output可能会跳变（在零点处不可微），就无法直接求导找到输出与输入之间的关系&lt;a class=&#34;link&#34; href=&#34;#ref2&#34; &gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;。为了量化微小变化Δw带给输出的偏差，需要把台阶铺开，也就是变成sigmoid函数。从此目标就是调整 w 使MLP输出与目标值之间的误差e不断降低。而w的变化方向应该是使误差下降最快的方向，也就是梯度方向，就需要e对w求导数（e 先对 sigmoid 求导，sigmoid 再对 w求导），再乘以步长就是 w 每次需要修正的量。&lt;/p&gt;
&lt;p&gt;同时，网络中其余的感知机也都要使用sigmoid函数，才能求得网络中所有w的导数。
因为误差e是前一层感知机输出Z的函数，比如采用最小二乘法，则 e = (σ(Z)-target)²，根据链式法则，需要对左侧一层的激活函数求导才能求得之前 w 的导数。如果它们仍采用阶跃激活函数，导数在非零处为零，但在零点处不可导&lt;a class=&#34;link&#34; href=&#34;#ref3&#34; &gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;，就无法修正之前的w，也就无法完成误差的反向传播。&lt;/p&gt;
&lt;p&gt;MSE 对 σ 求导：((σ(z)-target)²)&amp;rsquo; = 2σ(z)，
σ 对 z 求导：σ(z)&amp;rsquo; = σ(z)(1-σ(z))，
z 对 w 求导：x（来自上一层的输出，或是网络Input），
所以输出层的 w 的导数为：2σ(z)∗σ(z)(1-σ(z))∗x（简化为 δ∗x）&lt;/p&gt;
&lt;p&gt;要求左侧一层的 w₋₁ 的导数，根据 chain rule:
这层的z对 x (也就是 σ₋₁(z₋₁)) 的导数: w，
x 对 z₋₁ 的导数：σ(z₋₁)(1-σ(z₋₁))，
z₋₁ 对 w₋₁ 的导数：x₋₁，
所以e对左侧一层的 w₋₁ 的导数为：δ∗w∗σ(z₋₁)(1-σ(z₋₁))∗x₋₁（简化为 δ₋₁∗x₋₁）&lt;/p&gt;
&lt;p&gt;再往左的话，即 δ₋₂∗x₋₂ , &amp;hellip;&lt;/p&gt;
&lt;p&gt;对于输出层有多个神经元，误差是多个神经元输出之和，所以e求导的时候要兵分多路，e分别对每一路求导数，然后加起来。&lt;a class=&#34;link&#34; href=&#34;#ref-backprop&#34; &gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(2022-12-25)
比如下图中，有两个输出神经元 y₁^, y₂^，求 e 对 w₁ 的梯度∂e/∂w₁，就是两个输出神经元分别对 w₁ 求梯度，再加起来。&lt;/p&gt;





  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD.png width=&gt;
  
  


&lt;hr&gt;
&lt;p&gt;刘二那个反向传播的图，分两路：一路对x求导，一路对w求导。&lt;/p&gt;





  
  
  
  
   
  
  
   
  
  &lt;img src= /writenotes/calc/img/%E5%B1%80%E9%83%A8%E5%AF%BC%E6%95%B0.png width=&gt;
  
  


&lt;p&gt;每个局部计算的导数，是在forward 构建计算图时就算好的，函数的梯度存储在各input节点上，而不是存在output节点上。&lt;/p&gt;
&lt;h3 id=&#34;sigmoid-function&#34;&gt;sigmoid function&lt;/h3&gt;
&lt;p&gt;Perceptron accepts several input signals and give one output, including 0 and 1. Each input times its corresponding weight and is added up. If the weighted summation is larger than threshold, the output is 1. Otherwise, output is 0.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1it4y1E72d/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;深度学习一定要有偏置项Bias吗？外加一段简单的神经网络反向传播BP算法手写推导～&lt;/a&gt;
一般要有 bias，因为线性函数 ax+b，b让模型在竖轴上移动，它在线性模型中是需要的。但在深度学习神经网络中，并不是每个地方都要设置 bias。
在清华大学的 cpm 项目中，认为在一些地方不设置 bias，使得模型训练稳定性会更强，计算速度以及显存消耗有优势&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div id=&#34;ref1&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Ih5Mr93E-2c&#34;&gt;1. Lecture 10 - Neural Networks -Caltech (Learning from data)-ytb&lt;/a&gt;&lt;/div&gt; 
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref2&#34;&gt;&lt;a href=http://neuralnetworksanddeeplearning.com/chap1.html#perceptrons&gt;2. NNDL Sigmoid Neurons&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref3&#34;&gt;&lt;a href=&#34;https://medium.com/biaslyai/pytorch-introduction-to-neural-network-feedforward-neural-network-model-e7231cff47cb&#34;&gt;3. PyTorch: Introduction to Neural Network — Feedforward / MLP&lt;/a&gt;&lt;/div&gt; 
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref4&#34;&gt;&lt;a href=&#34;https://www.zhihu.com/question/22334626/answer/103835591&#34;&gt;4. 神经网络激活函数的作用和原理？有没有形象解释？ - 颜沁睿的回答 - 知乎&lt;/a&gt;&lt;/div&gt; 
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ref-backprop&#34;&gt;&lt;a href=&#34;https://kasperfred.com/series/introduction-to-neural-networks/how-does-backpropagation-work&#34;&gt;5. How Does Backpropagation Work? - kasperfred&lt;/a&gt;&lt;/div&gt; 
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;ytb-Emerg&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0QczhVg5HaI&#34;&gt;Why Neural Networks can learn (almost) anything - Emergent Garden - ytb&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>memo: DL | Convolution Layers</title>
        <link>https://zichen34.github.io/writenotes/calc/dl_conv_layers/</link>
        <pubDate>Thu, 23 Dec 2021 17:29:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/dl_conv_layers/</guid>
        <description>&lt;h2 id=&#34;convolution&#34;&gt;Convolution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对像素重新计数，并计算新的“像素值”的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卷积核从左上角开始，每次向左或向下滑动，并与其重叠的部分做内积（对应项相乘再求和）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提取特征&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不做填充（valid padding），卷积后的输出尺寸为 $\lfloor\frac{n-k}{s}\rfloor+1$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;图像尺寸：n×n&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卷积核尺寸：k×k&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步长：s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卷积核从左上角开始，每次向左滑动&lt;strong&gt;一列&lt;/strong&gt;，最后停靠在右边缘，这时卷积核左侧的像素数再加上1（当前次），就是输出的尺寸 n-k+1。&lt;/p&gt;
&lt;p&gt;比如下图一行有5个像素，k=2，卷积核前面有3个再加上最后1个: 3+1 =4。&lt;/p&gt;

    
    
    
    
      
      
      
      
       
      
      
       
      
      &lt;img src= /writenotes/calc/img/DL_Conv_%E8%BE%93%E5%87%BA%E5%B0%BA%E5%AF%B8.png width=&gt;
      
      
    

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果步长s=2，不能正好滑到最后，可以丢掉多余的部分或者填充像素。&lt;a class=&#34;link&#34; href=&#34;#zhihu-%e5%87%a1%e5%a4%ab&#34; &gt;2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果步长s=3，计算式应为：$\frac{n-k}{s}+1 = \frac{5-2}{3}+1 =2$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果步长s=4，计算式应为：$\lfloor\frac{n-k}{s}\rfloor+1 = \lfloor\frac{5-2}{4}\rfloor+1 =1$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于 same padding, 输出尺寸：$\lfloor \frac{(n+2\times p-k)}{s} \rfloor+1$&lt;br&gt;
就是先对原始图像补充 p 圈像素，再做卷积。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;padding&#34;&gt;Padding&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在图像外围填充一圈或几圈像素，像素值通常为0&lt;/li&gt;
&lt;li&gt;保证输出与输入的尺寸一致。&lt;a class=&#34;link&#34; href=&#34;#zhihu-G&#34; &gt;1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;常见两种padding：
&lt;ol&gt;
&lt;li&gt;valid padding: 不填充，只使用原始图像&lt;/li&gt;
&lt;li&gt;same padding: 填充边缘，使卷积结果与输入尺寸一致。&lt;br&gt;
为了使输出尺寸仍等于n，即：$\frac{n-k+2*p}{s}+1 = n$，解得：$p=\frac{(n-1)*s+k-n}{2}$；如果s=1，则 $p=\frac{k-1}{2}$。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stride&#34;&gt;Stride&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;卷积核滑动的步长 s&lt;/li&gt;
&lt;li&gt;stride=1，则卷积核每次向左滑动一列或者向下滑动一行&lt;/li&gt;
&lt;li&gt;压缩信息：成比例缩小输出的尺寸，stride=2，则输出为输入的1/2。&lt;a class=&#34;link&#34; href=&#34;#zhihu-G&#34; &gt;1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pooling&#34;&gt;Pooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;保留特征，并减少计算量&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;max-pooling: 近视眼，只能看到最大的;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;average-pooling&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;(2023-12-12)&lt;/p&gt;
&lt;h2 id=&#34;favg_pool3d&#34;&gt;F.avg_pool3d&lt;/h2&gt;
&lt;p&gt;Number of channels doesn&amp;rsquo;t change, and D, H, W shrink. &lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/docs/stable/generated/torch.nn.AvgPool3d.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docs&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;inp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;avg_pool3d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# (1,3,2,3,4)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 456 329&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 24,144 L 72,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 88,144 L 136,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 176,144 L 224,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,144 L 288,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 328,144 L 376,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 392,144 L 440,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,16 L 0,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,16 L 16,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,64 L 24,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,112 L 24,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,16 L 32,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,64 L 40,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,176 L 40,192&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,192 L 40,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,208 L 40,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,16 L 48,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,64 L 56,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,208 L 56,224&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,16 L 64,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,256 L 64,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 72,64 L 72,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 72,112 L 72,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,16 L 80,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,256 L 80,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 88,64 L 88,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 88,112 L 88,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 96,16 L 96,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 104,64 L 104,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 120,64 L 120,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 136,128 L 136,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,16 L 152,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,16 L 168,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 176,64 L 176,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 176,112 L 176,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 184,16 L 184,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,64 L 192,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,176 L 192,192&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,192 L 192,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,208 L 192,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 200,16 L 200,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 208,64 L 208,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 208,208 L 208,224&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 216,16 L 216,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 216,256 L 216,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 224,64 L 224,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 224,112 L 224,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 232,16 L 232,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 232,256 L 232,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,64 L 240,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,112 L 240,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 248,16 L 248,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 256,64 L 256,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 272,64 L 272,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 288,128 L 288,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 304,16 L 304,48&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 320,16 L 320,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 328,64 L 328,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 328,112 L 328,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 336,16 L 336,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 344,64 L 344,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 344,176 L 344,192&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 344,192 L 344,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 344,208 L 344,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 352,16 L 352,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 360,64 L 360,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 360,208 L 360,224&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 368,16 L 368,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 368,256 L 368,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 376,64 L 376,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 376,112 L 376,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 384,16 L 384,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 384,256 L 384,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 392,64 L 392,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 392,112 L 392,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 400,16 L 400,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 408,64 L 408,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 424,64 L 424,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 440,128 L 440,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,208 L 96,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 232,208 L 248,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 384,208 L 400,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,256 L 64,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,272 L 80,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,208 L 64,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,208 L 80,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,64 L 24,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,80 L 40,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,16 L 24,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,80 L 56,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,16 L 40,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 56,80 L 72,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,16 L 56,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 72,80 L 88,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,16 L 72,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 88,80 L 104,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,16 L 88,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 104,80 L 120,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,256 L 216,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,16 L 104,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 216,272 L 232,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 96,16 L 120,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,208 L 216,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 208,208 L 232,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 160,80 L 176,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 176,80 L 192,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,16 L 176,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 192,80 L 208,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,16 L 192,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 208,80 L 224,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 184,16 L 208,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 224,80 L 240,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 200,16 L 224,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,80 L 256,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 216,16 L 240,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 256,80 L 272,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 344,256 L 368,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 232,16 L 256,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 368,272 L 384,304&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 248,16 L 272,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 344,208 L 368,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 360,208 L 384,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 312,80 L 328,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 328,80 L 344,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 304,16 L 328,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 344,80 L 360,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 320,16 L 344,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 360,80 L 376,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 336,16 L 360,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 376,80 L 392,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 352,16 L 376,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 392,80 L 408,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 368,16 L 392,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 408,80 L 424,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 384,16 L 408,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 400,16 L 424,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,192 L 40,200&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;56.000000,192.000000 44.000000,186.399994 44.000000,197.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(90.000000, 40.000000, 192.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;92.000000,208.000000 80.000000,202.399994 80.000000,213.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(120.000000, 80.000000, 208.000000)&#39;&gt;&lt;/polygon&gt;
&lt;path d=&#39;M 192,192 L 192,200&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;208.000000,192.000000 196.000000,186.399994 196.000000,197.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(90.000000, 192.000000, 192.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;244.000000,208.000000 232.000000,202.399994 232.000000,213.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(120.000000, 232.000000, 208.000000)&#39;&gt;&lt;/polygon&gt;
&lt;path d=&#39;M 344,192 L 344,200&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;polygon points=&#39;360.000000,192.000000 348.000000,186.399994 348.000000,197.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(90.000000, 344.000000, 192.000000)&#39;&gt;&lt;/polygon&gt;
&lt;polygon points=&#39;396.000000,208.000000 384.000000,202.399994 384.000000,213.600006&#39; fill=&#39;currentColor&#39; transform=&#39;rotate(120.000000, 384.000000, 208.000000)&#39;&gt;&lt;/polygon&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;C&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;D&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;n&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;=&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;&#39;&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;C&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;192&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;192&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;D&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;n&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;=&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;208&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;216&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;264&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;272&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;280&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;280&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;288&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;288&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;288&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;304&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;&#39;&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;336&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;C&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;344&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;344&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;D&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;352&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;n&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;352&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;=&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;360&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;360&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;368&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;416&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;424&#39; y=&#39;36&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;432&#39; y=&#39;52&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;432&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋱&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;440&#39; y=&#39;68&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;440&#39; y=&#39;84&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;440&#39; y=&#39;100&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;⋮&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/YoYo000/MVSNet&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MVSNet&lt;/a&gt; uses &lt;code&gt;AvgPool3d&lt;/code&gt; to compute the sum of every 4 depth-probability planes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;avg4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;avg_pool3d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;n&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prob_volume&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unsqueeze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# (bs,C=1,D=192,H=128,W=160)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;n&#34;&gt;pad&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# (bs,C=1,D=195,H=128,W=160)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# (bs,C=1,D=192,H=128,W=160)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;prob_volume_sum4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;avg4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;deconvolution&#34;&gt;Deconvolution&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;complexity-of-cnn&#34;&gt;Complexity of CNN&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;#zhihu-Michael&#34; &gt;3&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;convtranspose2d&#34;&gt;ConvTranspose2d()&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConvTranspose2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Deconvolution &lt;a class=&#34;link&#34; href=&#34;https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;visualization&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(2023-07-19)&lt;/p&gt;
&lt;h2 id=&#34;torchvisionmodelsresnet34&#34;&gt;torchvision.models.resnet34&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/hub/pytorch_vision_resnet/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ResNet - PyTorch&lt;/a&gt;
| &lt;a class=&#34;link&#34; href=&#34;https://github.com/pytorch/vision/blob/29418e34a94e2c43f861a321265f7f21035e7b19/torchvision/models/resnet.py#L710&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Source code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;layers: [3,4,6,3] means that &lt;code&gt;layer1&lt;/code&gt; has 3 &lt;code&gt;BasicBlock&lt;/code&gt; (resnet50 is &lt;code&gt;Bottleneck&lt;/code&gt;) convolution blocks,
and &lt;code&gt;layer2&lt;/code&gt; has 4 blocks, and &lt;code&gt;layer3&lt;/code&gt; has 6 blocks, and &lt;code&gt;layer4&lt;/code&gt; has 3 blocks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_forward_impl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# img.shape: (3, 300, 400)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# nn.Conv2d(), channels↑ and size↓, (1, 64, 150, 200)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;# batch norm, shape doesn&amp;#39;t change, (1, 64, 150, 200)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# act, shape keeps the same, (1, 64, 150, 200)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxpool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# max-pooling, size↓, (1, 64, 75, 100)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 3 identical &amp;#39;BasicBlock&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# stride in the 1st block is 1, so shape doesn&amp;#39;t change, (1, 64, 75, 100)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 4 identical &amp;#39;BasicBlock&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# stride in the 1st block is 2, so size↓, (1, 128, 38, 50)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 6 identical &amp;#39;BasicBlock&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# stride in the 1st block is 2, so size↓, (1, 256, 19, 25)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 3 identical &amp;#39;BasicBlock&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# stride in the 1st block is 2, so size↓, (1, 512, 10, 13)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;avgpool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# target output is (1,1), so (1, 512, 1, 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;# 512 -&amp;gt; num_classes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;(2023-09-12)&lt;/p&gt;
&lt;h2 id=&#34;fpad&#34;&gt;F.pad&lt;/h2&gt;
&lt;p&gt;Padding an image along width, or height, or depth directions. &lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/docs/stable/generated/torch.nn.functional.pad.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docs&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The order of dimensions should be arranged according to Width, Height, Depth, e.g., padding the last 3 dimensions:
&lt;code&gt;F.pad(x, (padding_left, padding_right, padding_top, padding_bottom, padding_front, padding_back) )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So the order of (l,r,t,b,f,b) is reverse against an image tensor: (Depth, H, W)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nnconv3d&#34;&gt;nn.Conv3d&lt;/h2&gt;
&lt;p&gt;Input: (B, Ch_in, D, H, W); Output: (B, Ch_out, D_out, H_out, W_out)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For example, a tensor with shape of (2, 3, 4, 224, 224) is
2 video clips with 3 frames and each frame is a 4-channel image with size 224x224.&lt;/p&gt;
&lt;p&gt;After convolution with a kernel of size (2, 4, 4), it can be transformed to
(B=2, Ch_out=128, D=2, H=56, W=56)&lt;/p&gt;



&lt;div class=&#34;goat svg-container &#34;&gt;
  
    &lt;svg
      xmlns=&#34;http://www.w3.org/2000/svg&#34;
      font-family=&#34;Menlo,Lucida Console,monospace&#34;
      
        viewBox=&#34;0 0 336 313&#34;
      &gt;
      &lt;g transform=&#39;translate(8,16)&#39;&gt;
&lt;path d=&#39;M 0,32 L 16,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,32 L 32,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,32 L 48,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,32 L 64,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 120,32 L 136,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 136,32 L 152,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,32 L 168,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,32 L 184,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,32 L 256,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 256,32 L 272,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 272,32 L 288,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 288,32 L 304,32&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,64 L 32,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,64 L 48,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,64 L 64,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,64 L 80,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 136,64 L 152,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,64 L 168,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,64 L 184,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 184,64 L 200,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 256,64 L 272,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 272,64 L 288,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 288,64 L 304,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 304,64 L 320,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,112 L 32,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,112 L 48,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,112 L 64,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,112 L 80,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 136,112 L 152,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,112 L 168,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,112 L 184,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 184,112 L 200,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 256,112 L 272,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 272,112 L 288,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 288,112 L 304,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 304,112 L 320,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,144 L 144,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 144,144 L 160,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,176 L 96,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 96,176 L 144,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 112,208 L 128,208&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 128,240 L 144,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 128,288 L 144,288&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,32 L 0,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,64 L 16,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,128 L 24,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,64 L 32,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,128 L 40,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,64 L 48,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,64 L 64,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 80,64 L 80,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 112,208 L 112,256&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 120,32 L 120,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 128,240 L 128,288&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 136,64 L 136,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 144,128 L 144,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 144,144 L 144,176&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 144,240 L 144,288&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,64 L 152,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 160,128 L 160,144&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,64 L 168,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 184,64 L 184,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 200,64 L 200,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,32 L 240,80&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 256,64 L 256,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 272,64 L 272,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 288,64 L 288,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 304,64 L 304,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 320,64 L 320,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,80 L 16,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 0,32 L 16,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 112,256 L 128,288&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 16,32 L 32,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 112,208 L 128,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 32,32 L 48,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 128,208 L 144,240&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 48,32 L 64,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 64,32 L 80,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 120,80 L 136,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 120,32 L 136,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 136,32 L 152,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 152,32 L 168,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 168,32 L 184,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 184,32 L 200,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,80 L 256,112&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 240,32 L 256,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 256,32 L 272,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 272,32 L 288,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 288,32 L 304,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 304,32 L 320,64&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 24,120 L 24,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 40,120 L 40,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 144,120 L 144,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;path d=&#39;M 160,120 L 160,128&#39; fill=&#39;none&#39; stroke=&#39;currentColor&#39;&gt;&lt;/path&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;0&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;c&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;o&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;O&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;8&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;n&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;u&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;16&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;v&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;24&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;o&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;32&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;c&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;40&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;v&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;(&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;48&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;56&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;c&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;=&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;64&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;72&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;n&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;,&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;s&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;80&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;l&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;f&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;4&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;u&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;88&#39; y=&#39;260&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;s&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;r&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;)&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;o&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;96&#39; y=&#39;244&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;o&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;104&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;f&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;112&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;f&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;120&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;c&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;c&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;128&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;136&#39; y=&#39;196&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;1&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;144&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;c&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;152&#39; y=&#39;164&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;2&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;160&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;h&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;176&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;s&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;184&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;t&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;192&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;200&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;p&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;256&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;f&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;264&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;r&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;272&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;a&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;280&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;m&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;288&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;e&lt;/text&gt;
&lt;text text-anchor=&#39;middle&#39; x=&#39;304&#39; y=&#39;4&#39; fill=&#39;currentColor&#39; style=&#39;font-size:1em&#39;&gt;3&lt;/text&gt;
&lt;/g&gt;

    &lt;/svg&gt;
  
&lt;/div&gt;
&lt;p&gt;Iterate each channel for &lt;code&gt;D&lt;/code&gt; frames to convolve with a unique 3D kernel. Once every channel has multiplied by a kernel,
all the 4 weighted channels are summed directly to form one of output channels.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;depthwise-convolution&#34;&gt;Depthwise Convolution&lt;/h2&gt;
&lt;p&gt;date: 2023-07-25&lt;/p&gt;
&lt;p&gt;Separate a convolution into two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Shrink the size of the feature maps using 1-channel plane-wise kernel (Depthwise Conv);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expand the number of channels using 1x1 kernel (Pointwise Conv).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FLOPs reduced, but the IO access increased resulting in slower inference.
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/149564248&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Depth-wise Convolution - 沈景兵的文章 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Expanding channels process costs the equal amount of FLOPs in normal convolution and pointwise convolution.
For example, when expanding 3 channels to 256 channels, each pixel performs multiplication 256 times.&lt;/p&gt;
&lt;p&gt;However, the depthwise convolution doesn&amp;rsquo;t multiply a kernel by &lt;strong&gt;each&lt;/strong&gt; channel and &lt;strong&gt;sum&lt;/strong&gt; them together, but only multiply a kernel by only one channel.
&lt;a class=&#34;link&#34; href=&#34;https://towardsdatascience.com/a-basic-introduction-to-separable-convolutions-b99ec3102728&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A Basic Introduction to Separable Convolutions - Medium&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://towardsdatascience.com/a-basic-introduction-to-separable-convolutions-b99ec3102728&#34;&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:720/format:webp/1*yG6z6ESzsRW-9q5F_neOsg.png&#34;/&gt;&lt;/a&gt;
   &lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fewer parameters: 3x3x253 kernels are replaced with 1x1x256 kernels for every pixel on the resultant feature map.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:720/format:webp/1*Q7a20gyuunpJzXGnWayUDQ.png&#34;/&gt;
   &lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div id=&#34;zhihu-G&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/77471866&#34;&gt;CNN基础知识——卷积（Convolution）、填充（Padding）、步长(Stride) - G-kdom的文章 - 知乎&lt;/a&gt;&lt;/div&gt; (accessed Dec. 22, 2021).
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;zhihu-凡夫&#34;&gt;&lt;a href=https://zhuanlan.zhihu.com/p/338872733&gt;卷积神经网络参数计算及卷积层输出尺寸计算 - 凡夫俗子的文章 - 知乎&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div id=&#34;zhihu-Michael&#34;&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/31575074&#34;&gt;卷积神经网络的复杂度分析 - Michael Yuan的文章 - 知乎&lt;/a&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://zichen34.github.io/writenotes/calc/aliasing/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/aliasing/</guid>
        <description>&lt;p&gt;Frequency folding&lt;/p&gt;
&lt;p&gt;The sampled signal&amp;rsquo;s frequency spectrum is mirrored by the sample frequency. &lt;a class=&#34;link&#34; href=&#34;#1-Steve&#34; &gt;1-Steve&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div id=&#34;1-Steve&#34;&gt;&lt;a href=&#34;https://youtu.be/FcXZ28BX-xE?si=J21C8a6ZLlIp2lEw&#34;&gt;Shannon Nyquist Sampling Theorem&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://zichen34.github.io/writenotes/calc/img/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/img/</guid>
        <description></description>
        </item>
        <item>
        <title>watch: WaveOptics - Khan Academy India</title>
        <link>https://zichen34.github.io/writenotes/calc/waveoptics/khan_waveoptics/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://zichen34.github.io/writenotes/calc/waveoptics/khan_waveoptics/</guid>
        <description>&lt;p&gt;Source Video: &lt;a class=&#34;link&#34; href=&#34;https://youtu.be/N3levs4TzTA?si=C6CY0Za_KwNpAanu&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Reflection laws proof using Huygen&amp;rsquo;s principle | Wave optics | Physics | Khan Academy&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
